
enum shaderSymbol
{
    shader_SYMBOL_NULL,
    shader_SYMBOL_dot_start, 
    shader_SYMBOL_dot_end, 
    shader_SYMBOL_dot_error_terminal, 
    shader_SYMBOL_comma_terminal, 
    shader_SYMBOL_left_paren_terminal, 
    shader_SYMBOL_right_paren_terminal, 
    shader_SYMBOL_left_square_paren_terminal, 
    shader_SYMBOL_right_square_paren_terminal, 
    shader_SYMBOL_varying_terminal, 
    shader_SYMBOL_uniform_terminal, 
    shader_SYMBOL_output_terminal, 
    shader_SYMBOL_extern_terminal, 
    shader_SYMBOL_float_terminal, 
    shader_SYMBOL_string_terminal, 
    shader_SYMBOL_color_terminal, 
    shader_SYMBOL_point_terminal, 
    shader_SYMBOL_vector_terminal, 
    shader_SYMBOL_normal_terminal, 
    shader_SYMBOL_matrix_terminal, 
    shader_SYMBOL_void_terminal, 
    shader_SYMBOL_light_terminal, 
    shader_SYMBOL_surface_terminal, 
    shader_SYMBOL_volume_terminal, 
    shader_SYMBOL_displacement_terminal, 
    shader_SYMBOL_imager_terminal, 
    shader_SYMBOL_return_terminal, 
    shader_SYMBOL_break_terminal, 
    shader_SYMBOL_continue_terminal, 
    shader_SYMBOL_if_terminal, 
    shader_SYMBOL_while_terminal, 
    shader_SYMBOL_for_terminal, 
    shader_SYMBOL_solar_terminal, 
    shader_SYMBOL_illuminance_terminal, 
    shader_SYMBOL_illuminate_terminal, 
    shader_SYMBOL_left_curly_brace_terminal, 
    shader_SYMBOL_unary_minus, 
    shader_SYMBOL_question_terminal, 
    shader_SYMBOL_eq_terminal, 
    shader_SYMBOL_plus__eq_terminal, 
    shader_SYMBOL_minus__eq_terminal, 
    shader_SYMBOL_star__eq_terminal, 
    shader_SYMBOL_slash__eq_terminal, 
    shader_SYMBOL_pipe__pipe_terminal, 
    shader_SYMBOL_amp__amp_terminal, 
    shader_SYMBOL_gt_terminal, 
    shader_SYMBOL_gt__eq_terminal, 
    shader_SYMBOL_lt_terminal, 
    shader_SYMBOL_lt__eq_terminal, 
    shader_SYMBOL_eq__eq_terminal, 
    shader_SYMBOL_bang__eq_terminal, 
    shader_SYMBOL_plus_terminal, 
    shader_SYMBOL_minus_terminal, 
    shader_SYMBOL_dot_terminal, 
    shader_SYMBOL_hat_terminal, 
    shader_SYMBOL_slash_terminal, 
    shader_SYMBOL_star_terminal, 
    shader_SYMBOL_else_terminal, 
    shader_SYMBOL_unit, 
    shader_SYMBOL_definitions, 
    shader_SYMBOL_definition, 
    shader_SYMBOL_shader_type, 
    shader_SYMBOL_formals, 
    shader_SYMBOL_statements, 
    shader_SYMBOL_right_curly_brace_terminal, 
    shader_SYMBOL_type, 
    shader_SYMBOL_formal, 
    shader_SYMBOL_output, 
    shader_SYMBOL_detail, 
    shader_SYMBOL_definition_expressions, 
    shader_SYMBOL_semi_colon_terminal, 
    shader_SYMBOL_variable_definition, 
    shader_SYMBOL_extern, 
    shader_SYMBOL_definition_expression, 
    shader_SYMBOL_expression, 
    shader_SYMBOL_statement, 
    shader_SYMBOL_assign_expression, 
    shader_SYMBOL_call, 
    shader_SYMBOL_optional_integer, 
    shader_SYMBOL_solar, 
    shader_SYMBOL_parameters, 
    shader_SYMBOL_illuminate, 
    shader_SYMBOL_illuminance, 
    shader_SYMBOL_texture, 
    shader_SYMBOL_triple, 
    shader_SYMBOL_sixteentuple, 
    shader_SYMBOL_colon_terminal, 
    shader_SYMBOL_typecast, 
    shader_SYMBOL_integer, 
    shader_SYMBOL_real, 
    shader_SYMBOL_optional_string, 
    shader_SYMBOL_string_literal, 
    shader_SYMBOL_texture_terminal, 
    shader_SYMBOL_environment_terminal, 
    shader_SYMBOL_shadow_terminal, 
    shader_SYMBOL_identifier, 
    shader_SYMBOL_COUNT
};


const sweet::parser::LexerAction shader_lexer_actions[] = 
{
    { 0, "string" },
    { 0, NULL }
};


extern const sweet::parser::LexerState shader_lexer_state_machine_state_0;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_1;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_2;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_3;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_4;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_5;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_6;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_7;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_8;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_9;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_10;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_11;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_12;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_13;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_14;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_15;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_16;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_17;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_18;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_19;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_20;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_21;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_22;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_23;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_24;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_25;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_26;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_27;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_28;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_29;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_30;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_31;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_32;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_33;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_34;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_35;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_36;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_37;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_38;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_39;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_40;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_41;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_42;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_43;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_44;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_45;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_46;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_47;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_48;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_49;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_50;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_51;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_52;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_53;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_54;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_55;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_56;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_57;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_58;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_59;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_60;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_61;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_62;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_63;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_64;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_65;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_66;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_67;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_68;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_69;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_70;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_71;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_72;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_73;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_74;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_75;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_76;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_77;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_78;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_79;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_80;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_81;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_82;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_83;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_84;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_85;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_86;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_87;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_88;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_89;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_90;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_91;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_92;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_93;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_94;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_95;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_96;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_97;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_98;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_99;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_100;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_101;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_102;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_103;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_104;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_105;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_106;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_107;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_108;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_109;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_110;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_111;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_112;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_113;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_114;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_115;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_116;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_117;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_118;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_119;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_120;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_121;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_122;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_123;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_124;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_125;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_126;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_127;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_128;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_129;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_130;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_131;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_132;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_133;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_134;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_135;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_136;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_137;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_138;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_139;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_140;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_141;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_142;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_143;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_144;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_145;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_146;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_147;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_148;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_149;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_150;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_151;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_152;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_153;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_154;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_155;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_156;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_157;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_158;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_159;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_160;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_161;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_162;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_163;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_164;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_165;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_166;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_167;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_168;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_169;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_170;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_171;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_172;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_173;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_174;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_175;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_176;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_177;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_178;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_179;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_180;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_181;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_182;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_183;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_184;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_185;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_186;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_187;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_188;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_189;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_190;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_191;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_192;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_193;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_194;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_195;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_196;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_197;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_198;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_199;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_200;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_201;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_202;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_203;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_204;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_205;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_206;
extern const sweet::parser::LexerState shader_lexer_state_machine_state_207;


const sweet::parser::LexerTransition shader_lexer_state_machine_state_0_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_0 =
{
    shader_SYMBOL_left_curly_brace_terminal,
    shader_lexer_state_machine_state_0_transitions,
    shader_lexer_state_machine_state_0_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_1_transitions[] =
{
    { 33, 34, &shader_lexer_state_machine_state_165, NULL }, 
    { 34, 35, &shader_lexer_state_machine_state_179, NULL }, 
    { 38, 39, &shader_lexer_state_machine_state_167, NULL }, 
    { 39, 40, &shader_lexer_state_machine_state_179, NULL }, 
    { 40, 41, &shader_lexer_state_machine_state_3, NULL }, 
    { 41, 42, &shader_lexer_state_machine_state_4, NULL }, 
    { 42, 43, &shader_lexer_state_machine_state_156, NULL }, 
    { 43, 44, &shader_lexer_state_machine_state_158, NULL }, 
    { 44, 45, &shader_lexer_state_machine_state_6, NULL }, 
    { 45, 46, &shader_lexer_state_machine_state_159, NULL }, 
    { 46, 47, &shader_lexer_state_machine_state_154, NULL }, 
    { 47, 48, &shader_lexer_state_machine_state_157, NULL }, 
    { 48, 58, &shader_lexer_state_machine_state_173, NULL }, 
    { 58, 59, &shader_lexer_state_machine_state_172, NULL }, 
    { 59, 60, &shader_lexer_state_machine_state_5, NULL }, 
    { 60, 61, &shader_lexer_state_machine_state_162, NULL }, 
    { 61, 62, &shader_lexer_state_machine_state_7, NULL }, 
    { 62, 63, &shader_lexer_state_machine_state_160, NULL }, 
    { 63, 64, &shader_lexer_state_machine_state_171, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 91, 92, &shader_lexer_state_machine_state_152, NULL }, 
    { 93, 94, &shader_lexer_state_machine_state_153, NULL }, 
    { 94, 95, &shader_lexer_state_machine_state_155, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_207, NULL }, 
    { 98, 99, &shader_lexer_state_machine_state_114, NULL }, 
    { 99, 100, &shader_lexer_state_machine_state_54, NULL }, 
    { 100, 101, &shader_lexer_state_machine_state_26, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_102, NULL }, 
    { 102, 103, &shader_lexer_state_machine_state_44, NULL }, 
    { 103, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_38, NULL }, 
    { 106, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_8, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_75, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_69, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_96, NULL }, 
    { 112, 113, &shader_lexer_state_machine_state_59, NULL }, 
    { 113, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_108, NULL }, 
    { 115, 116, &shader_lexer_state_machine_state_13, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_185, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_89, NULL }, 
    { 118, 119, &shader_lexer_state_machine_state_20, NULL }, 
    { 119, 120, &shader_lexer_state_machine_state_129, NULL }, 
    { 120, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 123, 124, &shader_lexer_state_machine_state_0, NULL }, 
    { 124, 125, &shader_lexer_state_machine_state_169, NULL }, 
    { 125, 126, &shader_lexer_state_machine_state_2, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_1 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_1_transitions,
    shader_lexer_state_machine_state_1_transitions + 49
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_2_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_2 =
{
    shader_SYMBOL_right_curly_brace_terminal,
    shader_lexer_state_machine_state_2_transitions,
    shader_lexer_state_machine_state_2_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_3_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_3 =
{
    shader_SYMBOL_left_paren_terminal,
    shader_lexer_state_machine_state_3_transitions,
    shader_lexer_state_machine_state_3_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_4_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_4 =
{
    shader_SYMBOL_right_paren_terminal,
    shader_lexer_state_machine_state_4_transitions,
    shader_lexer_state_machine_state_4_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_5_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_5 =
{
    shader_SYMBOL_semi_colon_terminal,
    shader_lexer_state_machine_state_5_transitions,
    shader_lexer_state_machine_state_5_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_6_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_6 =
{
    shader_SYMBOL_comma_terminal,
    shader_lexer_state_machine_state_6_transitions,
    shader_lexer_state_machine_state_6_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_7_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_164, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_7 =
{
    shader_SYMBOL_eq_terminal,
    shader_lexer_state_machine_state_7_transitions,
    shader_lexer_state_machine_state_7_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_8_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_9, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_8 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_8_transitions,
    shader_lexer_state_machine_state_8_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_9_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 103, &shader_lexer_state_machine_state_207, NULL }, 
    { 103, 104, &shader_lexer_state_machine_state_10, NULL }, 
    { 104, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_9 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_9_transitions,
    shader_lexer_state_machine_state_9_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_10_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 104, &shader_lexer_state_machine_state_207, NULL }, 
    { 104, 105, &shader_lexer_state_machine_state_11, NULL }, 
    { 105, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_10 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_10_transitions,
    shader_lexer_state_machine_state_10_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_11_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_12, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_11 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_11_transitions,
    shader_lexer_state_machine_state_11_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_12_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_12 =
{
    shader_SYMBOL_light_terminal,
    shader_lexer_state_machine_state_12_transitions,
    shader_lexer_state_machine_state_12_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_13_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 104, &shader_lexer_state_machine_state_207, NULL }, 
    { 104, 105, &shader_lexer_state_machine_state_202, NULL }, 
    { 105, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_136, NULL }, 
    { 112, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_49, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_14, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_13 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_13_transitions,
    shader_lexer_state_machine_state_13_transitions + 11
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_14_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_15, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_14 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_14_transitions,
    shader_lexer_state_machine_state_14_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_15_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 102, &shader_lexer_state_machine_state_207, NULL }, 
    { 102, 103, &shader_lexer_state_machine_state_16, NULL }, 
    { 103, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_15 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_15_transitions,
    shader_lexer_state_machine_state_15_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_16_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_17, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_16 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_16_transitions,
    shader_lexer_state_machine_state_16_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_17_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 99, &shader_lexer_state_machine_state_207, NULL }, 
    { 99, 100, &shader_lexer_state_machine_state_18, NULL }, 
    { 100, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_17 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_17_transitions,
    shader_lexer_state_machine_state_17_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_18_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_19, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_18 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_18_transitions,
    shader_lexer_state_machine_state_18_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_19_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_19 =
{
    shader_SYMBOL_surface_terminal,
    shader_lexer_state_machine_state_19_transitions,
    shader_lexer_state_machine_state_19_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_20_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_83, NULL }, 
    { 98, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_64, NULL }, 
    { 102, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_21, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_20 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_20_transitions,
    shader_lexer_state_machine_state_20_transitions + 9
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_21_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_81, NULL }, 
    { 106, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_22, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_21 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_21_transitions,
    shader_lexer_state_machine_state_21_transitions + 8
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_22_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_23, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_22 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_22_transitions,
    shader_lexer_state_machine_state_22_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_23_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_24, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_23 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_23_transitions,
    shader_lexer_state_machine_state_23_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_24_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_25, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_24 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_24_transitions,
    shader_lexer_state_machine_state_24_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_25_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_25 =
{
    shader_SYMBOL_volume_terminal,
    shader_lexer_state_machine_state_25_transitions,
    shader_lexer_state_machine_state_25_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_26_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_27, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_26 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_26_transitions,
    shader_lexer_state_machine_state_26_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_27_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 115, &shader_lexer_state_machine_state_207, NULL }, 
    { 115, 116, &shader_lexer_state_machine_state_28, NULL }, 
    { 116, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_27 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_27_transitions,
    shader_lexer_state_machine_state_27_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_28_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 112, &shader_lexer_state_machine_state_207, NULL }, 
    { 112, 113, &shader_lexer_state_machine_state_29, NULL }, 
    { 113, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_28 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_28_transitions,
    shader_lexer_state_machine_state_28_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_29_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_30, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_29 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_29_transitions,
    shader_lexer_state_machine_state_29_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_30_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_31, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_30 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_30_transitions,
    shader_lexer_state_machine_state_30_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_31_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 99, &shader_lexer_state_machine_state_207, NULL }, 
    { 99, 100, &shader_lexer_state_machine_state_32, NULL }, 
    { 100, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_31 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_31_transitions,
    shader_lexer_state_machine_state_31_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_32_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_33, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_32 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_32_transitions,
    shader_lexer_state_machine_state_32_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_33_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_34, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_33 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_33_transitions,
    shader_lexer_state_machine_state_33_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_34_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_35, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_34 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_34_transitions,
    shader_lexer_state_machine_state_34_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_35_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_36, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_35 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_35_transitions,
    shader_lexer_state_machine_state_35_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_36_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_37, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_36 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_36_transitions,
    shader_lexer_state_machine_state_36_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_37_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_37 =
{
    shader_SYMBOL_displacement_terminal,
    shader_lexer_state_machine_state_37_transitions,
    shader_lexer_state_machine_state_37_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_38_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 102, &shader_lexer_state_machine_state_207, NULL }, 
    { 102, 103, &shader_lexer_state_machine_state_125, NULL }, 
    { 103, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_140, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_39, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_38 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_38_transitions,
    shader_lexer_state_machine_state_38_transitions + 9
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_39_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_40, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_39 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_39_transitions,
    shader_lexer_state_machine_state_39_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_40_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 103, &shader_lexer_state_machine_state_207, NULL }, 
    { 103, 104, &shader_lexer_state_machine_state_41, NULL }, 
    { 104, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_40 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_40_transitions,
    shader_lexer_state_machine_state_40_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_41_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_42, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_41 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_41_transitions,
    shader_lexer_state_machine_state_41_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_42_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_43, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_42 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_42_transitions,
    shader_lexer_state_machine_state_42_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_43_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_43 =
{
    shader_SYMBOL_imager_terminal,
    shader_lexer_state_machine_state_43_transitions,
    shader_lexer_state_machine_state_43_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_44_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_45, NULL }, 
    { 109, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_134, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_44 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_44_transitions,
    shader_lexer_state_machine_state_44_transitions + 8
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_45_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_46, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_45 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_45_transitions,
    shader_lexer_state_machine_state_45_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_46_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_47, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_46 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_46_transitions,
    shader_lexer_state_machine_state_46_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_47_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_48, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_47 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_47_transitions,
    shader_lexer_state_machine_state_47_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_48_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_48 =
{
    shader_SYMBOL_float_terminal,
    shader_lexer_state_machine_state_48_transitions,
    shader_lexer_state_machine_state_48_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_49_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_50, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_49 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_49_transitions,
    shader_lexer_state_machine_state_49_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_50_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_51, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_50 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_50_transitions,
    shader_lexer_state_machine_state_50_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_51_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_52, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_51 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_51_transitions,
    shader_lexer_state_machine_state_51_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_52_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 103, &shader_lexer_state_machine_state_207, NULL }, 
    { 103, 104, &shader_lexer_state_machine_state_53, NULL }, 
    { 104, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_52 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_52_transitions,
    shader_lexer_state_machine_state_52_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_53_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_53 =
{
    shader_SYMBOL_string_terminal,
    shader_lexer_state_machine_state_53_transitions,
    shader_lexer_state_machine_state_53_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_54_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_55, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_54 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_54_transitions,
    shader_lexer_state_machine_state_54_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_55_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_56, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_119, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_55 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_55_transitions,
    shader_lexer_state_machine_state_55_transitions + 8
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_56_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_57, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_56 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_56_transitions,
    shader_lexer_state_machine_state_56_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_57_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_58, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_57 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_57_transitions,
    shader_lexer_state_machine_state_57_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_58_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_58 =
{
    shader_SYMBOL_color_terminal,
    shader_lexer_state_machine_state_58_transitions,
    shader_lexer_state_machine_state_58_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_59_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_60, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_59 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_59_transitions,
    shader_lexer_state_machine_state_59_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_60_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_61, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_60 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_60_transitions,
    shader_lexer_state_machine_state_60_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_61_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_62, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_61 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_61_transitions,
    shader_lexer_state_machine_state_61_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_62_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_63, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_62 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_62_transitions,
    shader_lexer_state_machine_state_62_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_63_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_63 =
{
    shader_SYMBOL_point_terminal,
    shader_lexer_state_machine_state_63_transitions,
    shader_lexer_state_machine_state_63_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_64_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 99, &shader_lexer_state_machine_state_207, NULL }, 
    { 99, 100, &shader_lexer_state_machine_state_65, NULL }, 
    { 100, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_64 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_64_transitions,
    shader_lexer_state_machine_state_64_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_65_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_66, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_65 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_65_transitions,
    shader_lexer_state_machine_state_65_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_66_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_67, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_66 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_66_transitions,
    shader_lexer_state_machine_state_66_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_67_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_68, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_67 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_67_transitions,
    shader_lexer_state_machine_state_67_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_68_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_68 =
{
    shader_SYMBOL_vector_terminal,
    shader_lexer_state_machine_state_68_transitions,
    shader_lexer_state_machine_state_68_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_69_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_70, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_69 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_69_transitions,
    shader_lexer_state_machine_state_69_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_70_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_71, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_70 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_70_transitions,
    shader_lexer_state_machine_state_70_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_71_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_72, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_71 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_71_transitions,
    shader_lexer_state_machine_state_71_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_72_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_73, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_72 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_72_transitions,
    shader_lexer_state_machine_state_72_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_73_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_74, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_73 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_73_transitions,
    shader_lexer_state_machine_state_73_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_74_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_74 =
{
    shader_SYMBOL_normal_terminal,
    shader_lexer_state_machine_state_74_transitions,
    shader_lexer_state_machine_state_74_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_75_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_76, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_75 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_75_transitions,
    shader_lexer_state_machine_state_75_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_76_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_77, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_76 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_76_transitions,
    shader_lexer_state_machine_state_76_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_77_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_78, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_77 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_77_transitions,
    shader_lexer_state_machine_state_77_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_78_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_79, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_78 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_78_transitions,
    shader_lexer_state_machine_state_78_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_79_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 120, &shader_lexer_state_machine_state_207, NULL }, 
    { 120, 121, &shader_lexer_state_machine_state_80, NULL }, 
    { 121, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_79 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_79_transitions,
    shader_lexer_state_machine_state_79_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_80_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_80 =
{
    shader_SYMBOL_matrix_terminal,
    shader_lexer_state_machine_state_80_transitions,
    shader_lexer_state_machine_state_80_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_81_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 100, &shader_lexer_state_machine_state_207, NULL }, 
    { 100, 101, &shader_lexer_state_machine_state_82, NULL }, 
    { 101, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_81 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_81_transitions,
    shader_lexer_state_machine_state_81_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_82_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_82 =
{
    shader_SYMBOL_void_terminal,
    shader_lexer_state_machine_state_82_transitions,
    shader_lexer_state_machine_state_82_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_83_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_84, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_83 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_83_transitions,
    shader_lexer_state_machine_state_83_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_84_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 121, &shader_lexer_state_machine_state_207, NULL }, 
    { 121, 122, &shader_lexer_state_machine_state_85, NULL }, 
    { 122, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_84 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_84_transitions,
    shader_lexer_state_machine_state_84_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_85_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_86, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_85 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_85_transitions,
    shader_lexer_state_machine_state_85_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_86_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_87, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_86 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_86_transitions,
    shader_lexer_state_machine_state_86_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_87_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 103, &shader_lexer_state_machine_state_207, NULL }, 
    { 103, 104, &shader_lexer_state_machine_state_88, NULL }, 
    { 104, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_87 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_87_transitions,
    shader_lexer_state_machine_state_87_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_88_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_88 =
{
    shader_SYMBOL_varying_terminal,
    shader_lexer_state_machine_state_88_transitions,
    shader_lexer_state_machine_state_88_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_89_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_90, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_89 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_89_transitions,
    shader_lexer_state_machine_state_89_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_90_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_91, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_90 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_90_transitions,
    shader_lexer_state_machine_state_90_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_91_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 102, &shader_lexer_state_machine_state_207, NULL }, 
    { 102, 103, &shader_lexer_state_machine_state_92, NULL }, 
    { 103, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_91 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_91_transitions,
    shader_lexer_state_machine_state_91_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_92_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_93, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_92 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_92_transitions,
    shader_lexer_state_machine_state_92_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_93_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_94, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_93 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_93_transitions,
    shader_lexer_state_machine_state_93_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_94_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_95, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_94 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_94_transitions,
    shader_lexer_state_machine_state_94_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_95_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_95 =
{
    shader_SYMBOL_uniform_terminal,
    shader_lexer_state_machine_state_95_transitions,
    shader_lexer_state_machine_state_95_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_96_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_97, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_96 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_96_transitions,
    shader_lexer_state_machine_state_96_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_97_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_98, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_97 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_97_transitions,
    shader_lexer_state_machine_state_97_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_98_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 112, &shader_lexer_state_machine_state_207, NULL }, 
    { 112, 113, &shader_lexer_state_machine_state_99, NULL }, 
    { 113, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_98 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_98_transitions,
    shader_lexer_state_machine_state_98_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_99_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_100, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_99 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_99_transitions,
    shader_lexer_state_machine_state_99_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_100_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_101, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_100 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_100_transitions,
    shader_lexer_state_machine_state_100_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_101_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_101 =
{
    shader_SYMBOL_output_terminal,
    shader_lexer_state_machine_state_101_transitions,
    shader_lexer_state_machine_state_101_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_102_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_126, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_192, NULL }, 
    { 111, 120, &shader_lexer_state_machine_state_207, NULL }, 
    { 120, 121, &shader_lexer_state_machine_state_103, NULL }, 
    { 121, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_102 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_102_transitions,
    shader_lexer_state_machine_state_102_transitions + 10
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_103_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_104, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_103 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_103_transitions,
    shader_lexer_state_machine_state_103_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_104_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_105, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_104 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_104_transitions,
    shader_lexer_state_machine_state_104_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_105_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_106, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_105 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_105_transitions,
    shader_lexer_state_machine_state_105_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_106_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_107, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_106 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_106_transitions,
    shader_lexer_state_machine_state_106_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_107_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_107 =
{
    shader_SYMBOL_extern_terminal,
    shader_lexer_state_machine_state_107_transitions,
    shader_lexer_state_machine_state_107_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_108_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_109, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_108 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_108_transitions,
    shader_lexer_state_machine_state_108_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_109_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_110, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_109 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_109_transitions,
    shader_lexer_state_machine_state_109_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_110_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_111, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_110 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_110_transitions,
    shader_lexer_state_machine_state_110_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_111_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_112, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_111 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_111_transitions,
    shader_lexer_state_machine_state_111_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_112_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_113, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_112 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_112_transitions,
    shader_lexer_state_machine_state_112_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_113_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_113 =
{
    shader_SYMBOL_return_terminal,
    shader_lexer_state_machine_state_113_transitions,
    shader_lexer_state_machine_state_113_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_114_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_115, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_114 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_114_transitions,
    shader_lexer_state_machine_state_114_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_115_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_116, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_115 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_115_transitions,
    shader_lexer_state_machine_state_115_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_116_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_117, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_116 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_116_transitions,
    shader_lexer_state_machine_state_116_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_117_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 107, &shader_lexer_state_machine_state_207, NULL }, 
    { 107, 108, &shader_lexer_state_machine_state_118, NULL }, 
    { 108, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_117 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_117_transitions,
    shader_lexer_state_machine_state_117_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_118_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_118 =
{
    shader_SYMBOL_break_terminal,
    shader_lexer_state_machine_state_118_transitions,
    shader_lexer_state_machine_state_118_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_119_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_120, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_119 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_119_transitions,
    shader_lexer_state_machine_state_119_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_120_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_121, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_120 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_120_transitions,
    shader_lexer_state_machine_state_120_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_121_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_122, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_121 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_121_transitions,
    shader_lexer_state_machine_state_121_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_122_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_123, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_122 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_122_transitions,
    shader_lexer_state_machine_state_122_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_123_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_124, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_123 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_123_transitions,
    shader_lexer_state_machine_state_123_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_124_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_124 =
{
    shader_SYMBOL_continue_terminal,
    shader_lexer_state_machine_state_124_transitions,
    shader_lexer_state_machine_state_124_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_125_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_125 =
{
    shader_SYMBOL_if_terminal,
    shader_lexer_state_machine_state_125_transitions,
    shader_lexer_state_machine_state_125_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_126_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 115, &shader_lexer_state_machine_state_207, NULL }, 
    { 115, 116, &shader_lexer_state_machine_state_127, NULL }, 
    { 116, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_126 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_126_transitions,
    shader_lexer_state_machine_state_126_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_127_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_128, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_127 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_127_transitions,
    shader_lexer_state_machine_state_127_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_128_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_128 =
{
    shader_SYMBOL_else_terminal,
    shader_lexer_state_machine_state_128_transitions,
    shader_lexer_state_machine_state_128_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_129_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 104, &shader_lexer_state_machine_state_207, NULL }, 
    { 104, 105, &shader_lexer_state_machine_state_130, NULL }, 
    { 105, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_129 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_129_transitions,
    shader_lexer_state_machine_state_129_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_130_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_131, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_130 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_130_transitions,
    shader_lexer_state_machine_state_130_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_131_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_132, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_131 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_131_transitions,
    shader_lexer_state_machine_state_131_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_132_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_133, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_132 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_132_transitions,
    shader_lexer_state_machine_state_132_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_133_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_133 =
{
    shader_SYMBOL_while_terminal,
    shader_lexer_state_machine_state_133_transitions,
    shader_lexer_state_machine_state_133_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_134_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_135, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_134 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_134_transitions,
    shader_lexer_state_machine_state_134_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_135_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_135 =
{
    shader_SYMBOL_for_terminal,
    shader_lexer_state_machine_state_135_transitions,
    shader_lexer_state_machine_state_135_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_136_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_137, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_136 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_136_transitions,
    shader_lexer_state_machine_state_136_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_137_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_138, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_137 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_137_transitions,
    shader_lexer_state_machine_state_137_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_138_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_139, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_138 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_138_transitions,
    shader_lexer_state_machine_state_138_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_139_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_139 =
{
    shader_SYMBOL_solar_terminal,
    shader_lexer_state_machine_state_139_transitions,
    shader_lexer_state_machine_state_139_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_140_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 108, &shader_lexer_state_machine_state_207, NULL }, 
    { 108, 109, &shader_lexer_state_machine_state_141, NULL }, 
    { 109, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_140 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_140_transitions,
    shader_lexer_state_machine_state_140_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_141_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_142, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_141 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_141_transitions,
    shader_lexer_state_machine_state_141_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_142_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_143, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_142 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_142_transitions,
    shader_lexer_state_machine_state_142_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_143_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_144, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_143 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_143_transitions,
    shader_lexer_state_machine_state_143_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_144_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_145, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_144 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_144_transitions,
    shader_lexer_state_machine_state_144_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_145_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_146, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_145 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_145_transitions,
    shader_lexer_state_machine_state_145_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_146_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_149, NULL }, 
    { 111, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_147, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_146 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_146_transitions,
    shader_lexer_state_machine_state_146_transitions + 8
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_147_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_148, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_147 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_147_transitions,
    shader_lexer_state_machine_state_147_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_148_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_148 =
{
    shader_SYMBOL_illuminate_terminal,
    shader_lexer_state_machine_state_148_transitions,
    shader_lexer_state_machine_state_148_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_149_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 99, &shader_lexer_state_machine_state_207, NULL }, 
    { 99, 100, &shader_lexer_state_machine_state_150, NULL }, 
    { 100, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_149 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_149_transitions,
    shader_lexer_state_machine_state_149_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_150_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_151, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_150 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_150_transitions,
    shader_lexer_state_machine_state_150_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_151_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_151 =
{
    shader_SYMBOL_illuminance_terminal,
    shader_lexer_state_machine_state_151_transitions,
    shader_lexer_state_machine_state_151_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_152_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_152 =
{
    shader_SYMBOL_left_square_paren_terminal,
    shader_lexer_state_machine_state_152_transitions,
    shader_lexer_state_machine_state_152_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_153_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_153 =
{
    shader_SYMBOL_right_square_paren_terminal,
    shader_lexer_state_machine_state_153_transitions,
    shader_lexer_state_machine_state_153_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_154_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_175, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_154 =
{
    shader_SYMBOL_dot_terminal,
    shader_lexer_state_machine_state_154_transitions,
    shader_lexer_state_machine_state_154_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_155_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_155 =
{
    shader_SYMBOL_hat_terminal,
    shader_lexer_state_machine_state_155_transitions,
    shader_lexer_state_machine_state_155_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_156_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_183, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_156 =
{
    shader_SYMBOL_star_terminal,
    shader_lexer_state_machine_state_156_transitions,
    shader_lexer_state_machine_state_156_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_157_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_184, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_157 =
{
    shader_SYMBOL_slash_terminal,
    shader_lexer_state_machine_state_157_transitions,
    shader_lexer_state_machine_state_157_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_158_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_181, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_158 =
{
    shader_SYMBOL_plus_terminal,
    shader_lexer_state_machine_state_158_transitions,
    shader_lexer_state_machine_state_158_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_159_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_182, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_159 =
{
    shader_SYMBOL_minus_terminal,
    shader_lexer_state_machine_state_159_transitions,
    shader_lexer_state_machine_state_159_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_160_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_161, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_160 =
{
    shader_SYMBOL_gt_terminal,
    shader_lexer_state_machine_state_160_transitions,
    shader_lexer_state_machine_state_160_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_161_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_161 =
{
    shader_SYMBOL_gt__eq_terminal,
    shader_lexer_state_machine_state_161_transitions,
    shader_lexer_state_machine_state_161_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_162_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_163, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_162 =
{
    shader_SYMBOL_lt_terminal,
    shader_lexer_state_machine_state_162_transitions,
    shader_lexer_state_machine_state_162_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_163_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_163 =
{
    shader_SYMBOL_lt__eq_terminal,
    shader_lexer_state_machine_state_163_transitions,
    shader_lexer_state_machine_state_163_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_164_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_164 =
{
    shader_SYMBOL_eq__eq_terminal,
    shader_lexer_state_machine_state_164_transitions,
    shader_lexer_state_machine_state_164_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_165_transitions[] =
{
    { 61, 62, &shader_lexer_state_machine_state_166, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_165 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_165_transitions,
    shader_lexer_state_machine_state_165_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_166_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_166 =
{
    shader_SYMBOL_bang__eq_terminal,
    shader_lexer_state_machine_state_166_transitions,
    shader_lexer_state_machine_state_166_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_167_transitions[] =
{
    { 38, 39, &shader_lexer_state_machine_state_168, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_167 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_167_transitions,
    shader_lexer_state_machine_state_167_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_168_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_168 =
{
    shader_SYMBOL_amp__amp_terminal,
    shader_lexer_state_machine_state_168_transitions,
    shader_lexer_state_machine_state_168_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_169_transitions[] =
{
    { 124, 125, &shader_lexer_state_machine_state_170, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_169 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_169_transitions,
    shader_lexer_state_machine_state_169_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_170_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_170 =
{
    shader_SYMBOL_pipe__pipe_terminal,
    shader_lexer_state_machine_state_170_transitions,
    shader_lexer_state_machine_state_170_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_171_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_171 =
{
    shader_SYMBOL_question_terminal,
    shader_lexer_state_machine_state_171_transitions,
    shader_lexer_state_machine_state_171_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_172_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_172 =
{
    shader_SYMBOL_colon_terminal,
    shader_lexer_state_machine_state_172_transitions,
    shader_lexer_state_machine_state_172_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_173_transitions[] =
{
    { 46, 47, &shader_lexer_state_machine_state_174, NULL }, 
    { 48, 58, &shader_lexer_state_machine_state_173, NULL }, 
    { 69, 70, &shader_lexer_state_machine_state_176, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_176, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_173 =
{
    shader_SYMBOL_integer,
    shader_lexer_state_machine_state_173_transitions,
    shader_lexer_state_machine_state_173_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_174_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_175, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_174 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_174_transitions,
    shader_lexer_state_machine_state_174_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_175_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_175, NULL }, 
    { 69, 70, &shader_lexer_state_machine_state_176, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_176, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_175 =
{
    shader_SYMBOL_real,
    shader_lexer_state_machine_state_175_transitions,
    shader_lexer_state_machine_state_175_transitions + 3
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_176_transitions[] =
{
    { 43, 44, &shader_lexer_state_machine_state_177, NULL }, 
    { 45, 46, &shader_lexer_state_machine_state_177, NULL }, 
    { 48, 58, &shader_lexer_state_machine_state_178, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_176 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_176_transitions,
    shader_lexer_state_machine_state_176_transitions + 3
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_177_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_178, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_177 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_177_transitions,
    shader_lexer_state_machine_state_177_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_178_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_178, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_178 =
{
    shader_SYMBOL_real,
    shader_lexer_state_machine_state_178_transitions,
    shader_lexer_state_machine_state_178_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_179_transitions[] =
{
    { 0, 2147483647, &shader_lexer_state_machine_state_180, &shader_lexer_actions[0] }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_179 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_179_transitions,
    shader_lexer_state_machine_state_179_transitions + 1
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_180_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_180 =
{
    shader_SYMBOL_string_literal,
    shader_lexer_state_machine_state_180_transitions,
    shader_lexer_state_machine_state_180_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_181_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_181 =
{
    shader_SYMBOL_plus__eq_terminal,
    shader_lexer_state_machine_state_181_transitions,
    shader_lexer_state_machine_state_181_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_182_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_182 =
{
    shader_SYMBOL_minus__eq_terminal,
    shader_lexer_state_machine_state_182_transitions,
    shader_lexer_state_machine_state_182_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_183_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_183 =
{
    shader_SYMBOL_star__eq_terminal,
    shader_lexer_state_machine_state_183_transitions,
    shader_lexer_state_machine_state_183_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_184_transitions[] =
{
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_184 =
{
    shader_SYMBOL_slash__eq_terminal,
    shader_lexer_state_machine_state_184_transitions,
    shader_lexer_state_machine_state_184_transitions + 0
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_185_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_186, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_185 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_185_transitions,
    shader_lexer_state_machine_state_185_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_186_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 120, &shader_lexer_state_machine_state_207, NULL }, 
    { 120, 121, &shader_lexer_state_machine_state_187, NULL }, 
    { 121, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_186 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_186_transitions,
    shader_lexer_state_machine_state_186_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_187_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_188, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_187 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_187_transitions,
    shader_lexer_state_machine_state_187_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_188_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 117, &shader_lexer_state_machine_state_207, NULL }, 
    { 117, 118, &shader_lexer_state_machine_state_189, NULL }, 
    { 118, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_188 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_188_transitions,
    shader_lexer_state_machine_state_188_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_189_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_190, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_189 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_189_transitions,
    shader_lexer_state_machine_state_189_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_190_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_191, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_190 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_190_transitions,
    shader_lexer_state_machine_state_190_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_191_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_191 =
{
    shader_SYMBOL_texture_terminal,
    shader_lexer_state_machine_state_191_transitions,
    shader_lexer_state_machine_state_191_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_192_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 118, &shader_lexer_state_machine_state_207, NULL }, 
    { 118, 119, &shader_lexer_state_machine_state_193, NULL }, 
    { 119, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_192 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_192_transitions,
    shader_lexer_state_machine_state_192_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_193_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 105, &shader_lexer_state_machine_state_207, NULL }, 
    { 105, 106, &shader_lexer_state_machine_state_194, NULL }, 
    { 106, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_193 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_193_transitions,
    shader_lexer_state_machine_state_193_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_194_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 114, &shader_lexer_state_machine_state_207, NULL }, 
    { 114, 115, &shader_lexer_state_machine_state_195, NULL }, 
    { 115, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_194 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_194_transitions,
    shader_lexer_state_machine_state_194_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_195_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_196, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_195 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_195_transitions,
    shader_lexer_state_machine_state_195_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_196_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_197, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_196 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_196_transitions,
    shader_lexer_state_machine_state_196_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_197_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 109, &shader_lexer_state_machine_state_207, NULL }, 
    { 109, 110, &shader_lexer_state_machine_state_198, NULL }, 
    { 110, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_197 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_197_transitions,
    shader_lexer_state_machine_state_197_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_198_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 101, &shader_lexer_state_machine_state_207, NULL }, 
    { 101, 102, &shader_lexer_state_machine_state_199, NULL }, 
    { 102, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_198 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_198_transitions,
    shader_lexer_state_machine_state_198_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_199_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 110, &shader_lexer_state_machine_state_207, NULL }, 
    { 110, 111, &shader_lexer_state_machine_state_200, NULL }, 
    { 111, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_199 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_199_transitions,
    shader_lexer_state_machine_state_199_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_200_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 116, &shader_lexer_state_machine_state_207, NULL }, 
    { 116, 117, &shader_lexer_state_machine_state_201, NULL }, 
    { 117, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_200 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_200_transitions,
    shader_lexer_state_machine_state_200_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_201_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_201 =
{
    shader_SYMBOL_environment_terminal,
    shader_lexer_state_machine_state_201_transitions,
    shader_lexer_state_machine_state_201_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_202_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 98, &shader_lexer_state_machine_state_203, NULL }, 
    { 98, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_202 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_202_transitions,
    shader_lexer_state_machine_state_202_transitions + 5
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_203_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 100, &shader_lexer_state_machine_state_207, NULL }, 
    { 100, 101, &shader_lexer_state_machine_state_204, NULL }, 
    { 101, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_203 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_203_transitions,
    shader_lexer_state_machine_state_203_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_204_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 111, &shader_lexer_state_machine_state_207, NULL }, 
    { 111, 112, &shader_lexer_state_machine_state_205, NULL }, 
    { 112, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_204 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_204_transitions,
    shader_lexer_state_machine_state_204_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_205_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 119, &shader_lexer_state_machine_state_207, NULL }, 
    { 119, 120, &shader_lexer_state_machine_state_206, NULL }, 
    { 120, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_205 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_205_transitions,
    shader_lexer_state_machine_state_205_transitions + 6
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_206_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_206 =
{
    shader_SYMBOL_shadow_terminal,
    shader_lexer_state_machine_state_206_transitions,
    shader_lexer_state_machine_state_206_transitions + 4
};


const sweet::parser::LexerTransition shader_lexer_state_machine_state_207_transitions[] =
{
    { 48, 58, &shader_lexer_state_machine_state_207, NULL }, 
    { 65, 91, &shader_lexer_state_machine_state_207, NULL }, 
    { 95, 96, &shader_lexer_state_machine_state_207, NULL }, 
    { 97, 123, &shader_lexer_state_machine_state_207, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_207 =
{
    shader_SYMBOL_identifier,
    shader_lexer_state_machine_state_207_transitions,
    shader_lexer_state_machine_state_207_transitions + 4
};


extern const sweet::parser::LexerState shader_lexer_state_machine_state_208;


const sweet::parser::LexerTransition shader_lexer_state_machine_state_208_transitions[] =
{
    { 9, 11, &shader_lexer_state_machine_state_208, NULL }, 
    { 13, 14, &shader_lexer_state_machine_state_208, NULL }, 
    { 32, 33, &shader_lexer_state_machine_state_208, NULL }, 
    { 0, 0, NULL }
};


const sweet::parser::LexerState shader_lexer_state_machine_state_208 =
{
    shader_SYMBOL_NULL,
    shader_lexer_state_machine_state_208_transitions,
    shader_lexer_state_machine_state_208_transitions + 3
};


const sweet::parser::LexerStateMachine shader_lexer_state_machine = 
{
    &shader_lexer_state_machine_state_1, 
    &shader_lexer_state_machine_state_208, 
    shader_lexer_actions,
    shader_lexer_actions + 1
};


const sweet::parser::ParserAction shader_parser_actions[] = 
{
    { 0, "pass" },
    { 1, "add_to_list" },
    { 2, "create_list" },
    { 3, "empty_list" },
    { 4, "shader_definition" },
    { 5, "function_definition" },
    { 6, "formal" },
    { 7, "variable_definition" },
    { 8, "definition_expression" },
    { 9, "definition_expression_with_assignment" },
    { 10, "light_shader" },
    { 11, "surface_shader" },
    { 12, "volume_shader" },
    { 13, "displacement_shader" },
    { 14, "imager_shader" },
    { 15, "float_type" },
    { 16, "string_type" },
    { 17, "color_type" },
    { 18, "point_type" },
    { 19, "vector_type" },
    { 20, "normal_type" },
    { 21, "matrix_type" },
    { 22, "void_type" },
    { 23, "varying" },
    { 24, "uniform" },
    { 25, "null" },
    { 26, "output" },
    { 27, "extern" },
    { 28, "block_statement" },
    { 29, "return_statement" },
    { 30, "break_statement" },
    { 31, "continue_statement" },
    { 32, "if_statement" },
    { 33, "if_else_statement" },
    { 34, "while_statement" },
    { 35, "for_statement" },
    { 36, "solar_statement" },
    { 37, "illuminate_statement" },
    { 38, "illuminance_statement" },
    { 39, "solar_keyword" },
    { 40, "illuminate_keyword" },
    { 41, "illuminance_keyword" },
    { 42, "compound_expression" },
    { 43, "integer_expression" },
    { 44, "real_expression" },
    { 45, "string_expression" },
    { 46, "identifier_expression" },
    { 47, "index_expression" },
    { 48, "dot_expression" },
    { 49, "cross_expression" },
    { 50, "multiply_expression" },
    { 51, "divide_expression" },
    { 52, "add_expression" },
    { 53, "subtract_expression" },
    { 54, "greater_expression" },
    { 55, "greater_equal_expression" },
    { 56, "less_expression" },
    { 57, "less_equal_expression" },
    { 58, "equal_expression" },
    { 59, "not_equal_expression" },
    { 60, "and_expression" },
    { 61, "or_expression" },
    { 62, "negate_expression" },
    { 63, "ternary_expression" },
    { 64, "typecast_expression" },
    { 65, "triple_expression" },
    { 66, "sixteentuple_expression" },
    { 67, "color_typecast" },
    { 68, "point_typecast" },
    { 69, "vector_typecast" },
    { 70, "normal_typecast" },
    { 71, "matrix_typecast" },
    { 72, "assign_expression" },
    { 73, "add_assign_expression" },
    { 74, "subtract_assign_expression" },
    { 75, "multiply_assign_expression" },
    { 76, "divide_assign_expression" },
    { 77, "index_assign_expression" },
    { 78, "index_add_assign_expression" },
    { 79, "index_subtract_assign_expression" },
    { 80, "index_multiply_assign_expression" },
    { 81, "index_divide_assign_expression" },
    { 82, "call_expression" },
    { 83, "texture_expression" },
    { 84, "environment_expression" },
    { 85, "shadow_expression" },
    { 0, NULL }
};


const sweet::parser::ParserProduction shader_parser_production_0 =
{
    shader_SYMBOL_dot_start, 
    NULL, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_1 =
{
    shader_SYMBOL_unit, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_2 =
{
    shader_SYMBOL_definitions, 
    shader_parser_actions + 1, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_3 =
{
    shader_SYMBOL_definitions, 
    shader_parser_actions + 2, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_4 =
{
    shader_SYMBOL_definitions, 
    shader_parser_actions + 3, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_5 =
{
    shader_SYMBOL_definition, 
    shader_parser_actions + 4, 
    8
};


const sweet::parser::ParserProduction shader_parser_production_6 =
{
    shader_SYMBOL_definition, 
    shader_parser_actions + 5, 
    8
};


const sweet::parser::ParserProduction shader_parser_production_7 =
{
    shader_SYMBOL_formals, 
    shader_parser_actions + 1, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_8 =
{
    shader_SYMBOL_formals, 
    shader_parser_actions + 2, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_9 =
{
    shader_SYMBOL_formals, 
    shader_parser_actions + 3, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_10 =
{
    shader_SYMBOL_formal, 
    shader_parser_actions + 6, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_11 =
{
    shader_SYMBOL_variable_definition, 
    shader_parser_actions + 7, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_12 =
{
    shader_SYMBOL_definition_expressions, 
    shader_parser_actions + 1, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_13 =
{
    shader_SYMBOL_definition_expressions, 
    shader_parser_actions + 2, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_14 =
{
    shader_SYMBOL_definition_expression, 
    shader_parser_actions + 8, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_15 =
{
    shader_SYMBOL_definition_expression, 
    shader_parser_actions + 9, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_16 =
{
    shader_SYMBOL_shader_type, 
    shader_parser_actions + 10, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_17 =
{
    shader_SYMBOL_shader_type, 
    shader_parser_actions + 11, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_18 =
{
    shader_SYMBOL_shader_type, 
    shader_parser_actions + 12, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_19 =
{
    shader_SYMBOL_shader_type, 
    shader_parser_actions + 13, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_20 =
{
    shader_SYMBOL_shader_type, 
    shader_parser_actions + 14, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_21 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 15, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_22 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 16, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_23 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 17, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_24 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 18, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_25 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 19, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_26 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 20, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_27 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 21, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_28 =
{
    shader_SYMBOL_type, 
    shader_parser_actions + 22, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_29 =
{
    shader_SYMBOL_detail, 
    shader_parser_actions + 23, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_30 =
{
    shader_SYMBOL_detail, 
    shader_parser_actions + 24, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_31 =
{
    shader_SYMBOL_detail, 
    shader_parser_actions + 25, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_32 =
{
    shader_SYMBOL_output, 
    shader_parser_actions + 26, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_33 =
{
    shader_SYMBOL_output, 
    shader_parser_actions + 25, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_34 =
{
    shader_SYMBOL_extern, 
    shader_parser_actions + 27, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_35 =
{
    shader_SYMBOL_extern, 
    shader_parser_actions + 25, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_36 =
{
    shader_SYMBOL_statements, 
    shader_parser_actions + 1, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_37 =
{
    shader_SYMBOL_statements, 
    shader_parser_actions + 2, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_38 =
{
    shader_SYMBOL_statements, 
    shader_parser_actions + 3, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_39 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 28, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_40 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 0, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_41 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 0, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_42 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 0, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_43 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 29, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_44 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 30, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_45 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 31, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_46 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 32, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_47 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 33, 
    7
};


const sweet::parser::ParserProduction shader_parser_production_48 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 34, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_49 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 35, 
    9
};


const sweet::parser::ParserProduction shader_parser_production_50 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 36, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_51 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 37, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_52 =
{
    shader_SYMBOL_statement, 
    shader_parser_actions + 38, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_53 =
{
    shader_SYMBOL_solar, 
    shader_parser_actions + 39, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_54 =
{
    shader_SYMBOL_illuminate, 
    shader_parser_actions + 40, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_55 =
{
    shader_SYMBOL_illuminance, 
    shader_parser_actions + 41, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_56 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 42, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_57 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 43, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_58 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 44, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_59 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 45, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_60 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_61 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 46, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_62 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 47, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_63 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_64 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_65 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_66 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 0, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_67 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 48, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_68 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 49, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_69 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 50, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_70 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 51, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_71 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 52, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_72 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 53, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_73 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 54, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_74 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 55, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_75 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 56, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_76 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 57, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_77 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 58, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_78 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 59, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_79 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 60, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_80 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 61, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_81 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 62, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_82 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 63, 
    5
};


const sweet::parser::ParserProduction shader_parser_production_83 =
{
    shader_SYMBOL_expression, 
    shader_parser_actions + 64, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_84 =
{
    shader_SYMBOL_optional_integer, 
    shader_parser_actions + 43, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_85 =
{
    shader_SYMBOL_optional_integer, 
    NULL, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_86 =
{
    shader_SYMBOL_integer, 
    NULL, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_87 =
{
    shader_SYMBOL_real, 
    NULL, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_88 =
{
    shader_SYMBOL_optional_string, 
    shader_parser_actions + 45, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_89 =
{
    shader_SYMBOL_optional_string, 
    NULL, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_90 =
{
    shader_SYMBOL_string_literal, 
    NULL, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_91 =
{
    shader_SYMBOL_triple, 
    shader_parser_actions + 65, 
    7
};


const sweet::parser::ParserProduction shader_parser_production_92 =
{
    shader_SYMBOL_sixteentuple, 
    shader_parser_actions + 66, 
    33
};


const sweet::parser::ParserProduction shader_parser_production_93 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 15, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_94 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 16, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_95 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 67, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_96 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 68, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_97 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 69, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_98 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 70, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_99 =
{
    shader_SYMBOL_typecast, 
    shader_parser_actions + 71, 
    2
};


const sweet::parser::ParserProduction shader_parser_production_100 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 72, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_101 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 73, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_102 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 74, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_103 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 75, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_104 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 76, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_105 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 77, 
    6
};


const sweet::parser::ParserProduction shader_parser_production_106 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 78, 
    6
};


const sweet::parser::ParserProduction shader_parser_production_107 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 79, 
    6
};


const sweet::parser::ParserProduction shader_parser_production_108 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 80, 
    6
};


const sweet::parser::ParserProduction shader_parser_production_109 =
{
    shader_SYMBOL_assign_expression, 
    shader_parser_actions + 81, 
    6
};


const sweet::parser::ParserProduction shader_parser_production_110 =
{
    shader_SYMBOL_parameters, 
    shader_parser_actions + 1, 
    3
};


const sweet::parser::ParserProduction shader_parser_production_111 =
{
    shader_SYMBOL_parameters, 
    shader_parser_actions + 2, 
    1
};


const sweet::parser::ParserProduction shader_parser_production_112 =
{
    shader_SYMBOL_parameters, 
    shader_parser_actions + 3, 
    0
};


const sweet::parser::ParserProduction shader_parser_production_113 =
{
    shader_SYMBOL_call, 
    shader_parser_actions + 82, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_114 =
{
    shader_SYMBOL_texture, 
    shader_parser_actions + 83, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_115 =
{
    shader_SYMBOL_texture, 
    shader_parser_actions + 84, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_116 =
{
    shader_SYMBOL_texture, 
    shader_parser_actions + 85, 
    4
};


const sweet::parser::ParserProduction shader_parser_production_117 =
{
    shader_SYMBOL_identifier, 
    NULL, 
    1
};


extern const sweet::parser::ParserState shader_parser_state_0;
extern const sweet::parser::ParserState shader_parser_state_1;
extern const sweet::parser::ParserState shader_parser_state_2;
extern const sweet::parser::ParserState shader_parser_state_3;
extern const sweet::parser::ParserState shader_parser_state_4;
extern const sweet::parser::ParserState shader_parser_state_5;
extern const sweet::parser::ParserState shader_parser_state_6;
extern const sweet::parser::ParserState shader_parser_state_7;
extern const sweet::parser::ParserState shader_parser_state_8;
extern const sweet::parser::ParserState shader_parser_state_9;
extern const sweet::parser::ParserState shader_parser_state_10;
extern const sweet::parser::ParserState shader_parser_state_11;
extern const sweet::parser::ParserState shader_parser_state_12;
extern const sweet::parser::ParserState shader_parser_state_13;
extern const sweet::parser::ParserState shader_parser_state_14;
extern const sweet::parser::ParserState shader_parser_state_15;
extern const sweet::parser::ParserState shader_parser_state_16;
extern const sweet::parser::ParserState shader_parser_state_17;
extern const sweet::parser::ParserState shader_parser_state_18;
extern const sweet::parser::ParserState shader_parser_state_19;
extern const sweet::parser::ParserState shader_parser_state_20;
extern const sweet::parser::ParserState shader_parser_state_21;
extern const sweet::parser::ParserState shader_parser_state_22;
extern const sweet::parser::ParserState shader_parser_state_23;
extern const sweet::parser::ParserState shader_parser_state_24;
extern const sweet::parser::ParserState shader_parser_state_25;
extern const sweet::parser::ParserState shader_parser_state_26;
extern const sweet::parser::ParserState shader_parser_state_27;
extern const sweet::parser::ParserState shader_parser_state_28;
extern const sweet::parser::ParserState shader_parser_state_29;
extern const sweet::parser::ParserState shader_parser_state_30;
extern const sweet::parser::ParserState shader_parser_state_31;
extern const sweet::parser::ParserState shader_parser_state_32;
extern const sweet::parser::ParserState shader_parser_state_33;
extern const sweet::parser::ParserState shader_parser_state_34;
extern const sweet::parser::ParserState shader_parser_state_35;
extern const sweet::parser::ParserState shader_parser_state_36;
extern const sweet::parser::ParserState shader_parser_state_37;
extern const sweet::parser::ParserState shader_parser_state_38;
extern const sweet::parser::ParserState shader_parser_state_39;
extern const sweet::parser::ParserState shader_parser_state_40;
extern const sweet::parser::ParserState shader_parser_state_41;
extern const sweet::parser::ParserState shader_parser_state_42;
extern const sweet::parser::ParserState shader_parser_state_43;
extern const sweet::parser::ParserState shader_parser_state_44;
extern const sweet::parser::ParserState shader_parser_state_45;
extern const sweet::parser::ParserState shader_parser_state_46;
extern const sweet::parser::ParserState shader_parser_state_47;
extern const sweet::parser::ParserState shader_parser_state_48;
extern const sweet::parser::ParserState shader_parser_state_49;
extern const sweet::parser::ParserState shader_parser_state_50;
extern const sweet::parser::ParserState shader_parser_state_51;
extern const sweet::parser::ParserState shader_parser_state_52;
extern const sweet::parser::ParserState shader_parser_state_53;
extern const sweet::parser::ParserState shader_parser_state_54;
extern const sweet::parser::ParserState shader_parser_state_55;
extern const sweet::parser::ParserState shader_parser_state_56;
extern const sweet::parser::ParserState shader_parser_state_57;
extern const sweet::parser::ParserState shader_parser_state_58;
extern const sweet::parser::ParserState shader_parser_state_59;
extern const sweet::parser::ParserState shader_parser_state_60;
extern const sweet::parser::ParserState shader_parser_state_61;
extern const sweet::parser::ParserState shader_parser_state_62;
extern const sweet::parser::ParserState shader_parser_state_63;
extern const sweet::parser::ParserState shader_parser_state_64;
extern const sweet::parser::ParserState shader_parser_state_65;
extern const sweet::parser::ParserState shader_parser_state_66;
extern const sweet::parser::ParserState shader_parser_state_67;
extern const sweet::parser::ParserState shader_parser_state_68;
extern const sweet::parser::ParserState shader_parser_state_69;
extern const sweet::parser::ParserState shader_parser_state_70;
extern const sweet::parser::ParserState shader_parser_state_71;
extern const sweet::parser::ParserState shader_parser_state_72;
extern const sweet::parser::ParserState shader_parser_state_73;
extern const sweet::parser::ParserState shader_parser_state_74;
extern const sweet::parser::ParserState shader_parser_state_75;
extern const sweet::parser::ParserState shader_parser_state_76;
extern const sweet::parser::ParserState shader_parser_state_77;
extern const sweet::parser::ParserState shader_parser_state_78;
extern const sweet::parser::ParserState shader_parser_state_79;
extern const sweet::parser::ParserState shader_parser_state_80;
extern const sweet::parser::ParserState shader_parser_state_81;
extern const sweet::parser::ParserState shader_parser_state_82;
extern const sweet::parser::ParserState shader_parser_state_83;
extern const sweet::parser::ParserState shader_parser_state_84;
extern const sweet::parser::ParserState shader_parser_state_85;
extern const sweet::parser::ParserState shader_parser_state_86;
extern const sweet::parser::ParserState shader_parser_state_87;
extern const sweet::parser::ParserState shader_parser_state_88;
extern const sweet::parser::ParserState shader_parser_state_89;
extern const sweet::parser::ParserState shader_parser_state_90;
extern const sweet::parser::ParserState shader_parser_state_91;
extern const sweet::parser::ParserState shader_parser_state_92;
extern const sweet::parser::ParserState shader_parser_state_93;
extern const sweet::parser::ParserState shader_parser_state_94;
extern const sweet::parser::ParserState shader_parser_state_95;
extern const sweet::parser::ParserState shader_parser_state_96;
extern const sweet::parser::ParserState shader_parser_state_97;
extern const sweet::parser::ParserState shader_parser_state_98;
extern const sweet::parser::ParserState shader_parser_state_99;
extern const sweet::parser::ParserState shader_parser_state_100;
extern const sweet::parser::ParserState shader_parser_state_101;
extern const sweet::parser::ParserState shader_parser_state_102;
extern const sweet::parser::ParserState shader_parser_state_103;
extern const sweet::parser::ParserState shader_parser_state_104;
extern const sweet::parser::ParserState shader_parser_state_105;
extern const sweet::parser::ParserState shader_parser_state_106;
extern const sweet::parser::ParserState shader_parser_state_107;
extern const sweet::parser::ParserState shader_parser_state_108;
extern const sweet::parser::ParserState shader_parser_state_109;
extern const sweet::parser::ParserState shader_parser_state_110;
extern const sweet::parser::ParserState shader_parser_state_111;
extern const sweet::parser::ParserState shader_parser_state_112;
extern const sweet::parser::ParserState shader_parser_state_113;
extern const sweet::parser::ParserState shader_parser_state_114;
extern const sweet::parser::ParserState shader_parser_state_115;
extern const sweet::parser::ParserState shader_parser_state_116;
extern const sweet::parser::ParserState shader_parser_state_117;
extern const sweet::parser::ParserState shader_parser_state_118;
extern const sweet::parser::ParserState shader_parser_state_119;
extern const sweet::parser::ParserState shader_parser_state_120;
extern const sweet::parser::ParserState shader_parser_state_121;
extern const sweet::parser::ParserState shader_parser_state_122;
extern const sweet::parser::ParserState shader_parser_state_123;
extern const sweet::parser::ParserState shader_parser_state_124;
extern const sweet::parser::ParserState shader_parser_state_125;
extern const sweet::parser::ParserState shader_parser_state_126;
extern const sweet::parser::ParserState shader_parser_state_127;
extern const sweet::parser::ParserState shader_parser_state_128;
extern const sweet::parser::ParserState shader_parser_state_129;
extern const sweet::parser::ParserState shader_parser_state_130;
extern const sweet::parser::ParserState shader_parser_state_131;
extern const sweet::parser::ParserState shader_parser_state_132;
extern const sweet::parser::ParserState shader_parser_state_133;
extern const sweet::parser::ParserState shader_parser_state_134;
extern const sweet::parser::ParserState shader_parser_state_135;
extern const sweet::parser::ParserState shader_parser_state_136;
extern const sweet::parser::ParserState shader_parser_state_137;
extern const sweet::parser::ParserState shader_parser_state_138;
extern const sweet::parser::ParserState shader_parser_state_139;
extern const sweet::parser::ParserState shader_parser_state_140;
extern const sweet::parser::ParserState shader_parser_state_141;
extern const sweet::parser::ParserState shader_parser_state_142;
extern const sweet::parser::ParserState shader_parser_state_143;
extern const sweet::parser::ParserState shader_parser_state_144;
extern const sweet::parser::ParserState shader_parser_state_145;
extern const sweet::parser::ParserState shader_parser_state_146;
extern const sweet::parser::ParserState shader_parser_state_147;
extern const sweet::parser::ParserState shader_parser_state_148;
extern const sweet::parser::ParserState shader_parser_state_149;
extern const sweet::parser::ParserState shader_parser_state_150;
extern const sweet::parser::ParserState shader_parser_state_151;
extern const sweet::parser::ParserState shader_parser_state_152;
extern const sweet::parser::ParserState shader_parser_state_153;
extern const sweet::parser::ParserState shader_parser_state_154;
extern const sweet::parser::ParserState shader_parser_state_155;
extern const sweet::parser::ParserState shader_parser_state_156;
extern const sweet::parser::ParserState shader_parser_state_157;
extern const sweet::parser::ParserState shader_parser_state_158;
extern const sweet::parser::ParserState shader_parser_state_159;
extern const sweet::parser::ParserState shader_parser_state_160;
extern const sweet::parser::ParserState shader_parser_state_161;
extern const sweet::parser::ParserState shader_parser_state_162;
extern const sweet::parser::ParserState shader_parser_state_163;
extern const sweet::parser::ParserState shader_parser_state_164;
extern const sweet::parser::ParserState shader_parser_state_165;
extern const sweet::parser::ParserState shader_parser_state_166;
extern const sweet::parser::ParserState shader_parser_state_167;
extern const sweet::parser::ParserState shader_parser_state_168;
extern const sweet::parser::ParserState shader_parser_state_169;
extern const sweet::parser::ParserState shader_parser_state_170;
extern const sweet::parser::ParserState shader_parser_state_171;
extern const sweet::parser::ParserState shader_parser_state_172;
extern const sweet::parser::ParserState shader_parser_state_173;
extern const sweet::parser::ParserState shader_parser_state_174;
extern const sweet::parser::ParserState shader_parser_state_175;
extern const sweet::parser::ParserState shader_parser_state_176;
extern const sweet::parser::ParserState shader_parser_state_177;
extern const sweet::parser::ParserState shader_parser_state_178;
extern const sweet::parser::ParserState shader_parser_state_179;
extern const sweet::parser::ParserState shader_parser_state_180;
extern const sweet::parser::ParserState shader_parser_state_181;
extern const sweet::parser::ParserState shader_parser_state_182;
extern const sweet::parser::ParserState shader_parser_state_183;
extern const sweet::parser::ParserState shader_parser_state_184;
extern const sweet::parser::ParserState shader_parser_state_185;
extern const sweet::parser::ParserState shader_parser_state_186;
extern const sweet::parser::ParserState shader_parser_state_187;
extern const sweet::parser::ParserState shader_parser_state_188;
extern const sweet::parser::ParserState shader_parser_state_189;
extern const sweet::parser::ParserState shader_parser_state_190;
extern const sweet::parser::ParserState shader_parser_state_191;
extern const sweet::parser::ParserState shader_parser_state_192;
extern const sweet::parser::ParserState shader_parser_state_193;
extern const sweet::parser::ParserState shader_parser_state_194;
extern const sweet::parser::ParserState shader_parser_state_195;
extern const sweet::parser::ParserState shader_parser_state_196;
extern const sweet::parser::ParserState shader_parser_state_197;
extern const sweet::parser::ParserState shader_parser_state_198;
extern const sweet::parser::ParserState shader_parser_state_199;
extern const sweet::parser::ParserState shader_parser_state_200;
extern const sweet::parser::ParserState shader_parser_state_201;
extern const sweet::parser::ParserState shader_parser_state_202;
extern const sweet::parser::ParserState shader_parser_state_203;
extern const sweet::parser::ParserState shader_parser_state_204;
extern const sweet::parser::ParserState shader_parser_state_205;
extern const sweet::parser::ParserState shader_parser_state_206;
extern const sweet::parser::ParserState shader_parser_state_207;
extern const sweet::parser::ParserState shader_parser_state_208;
extern const sweet::parser::ParserState shader_parser_state_209;
extern const sweet::parser::ParserState shader_parser_state_210;
extern const sweet::parser::ParserState shader_parser_state_211;
extern const sweet::parser::ParserState shader_parser_state_212;
extern const sweet::parser::ParserState shader_parser_state_213;
extern const sweet::parser::ParserState shader_parser_state_214;
extern const sweet::parser::ParserState shader_parser_state_215;
extern const sweet::parser::ParserState shader_parser_state_216;
extern const sweet::parser::ParserState shader_parser_state_217;
extern const sweet::parser::ParserState shader_parser_state_218;
extern const sweet::parser::ParserState shader_parser_state_219;
extern const sweet::parser::ParserState shader_parser_state_220;
extern const sweet::parser::ParserState shader_parser_state_221;
extern const sweet::parser::ParserState shader_parser_state_222;
extern const sweet::parser::ParserState shader_parser_state_223;
extern const sweet::parser::ParserState shader_parser_state_224;
extern const sweet::parser::ParserState shader_parser_state_225;
extern const sweet::parser::ParserState shader_parser_state_226;
extern const sweet::parser::ParserState shader_parser_state_227;
extern const sweet::parser::ParserState shader_parser_state_228;
extern const sweet::parser::ParserState shader_parser_state_229;
extern const sweet::parser::ParserState shader_parser_state_230;
extern const sweet::parser::ParserState shader_parser_state_231;
extern const sweet::parser::ParserState shader_parser_state_232;
extern const sweet::parser::ParserState shader_parser_state_233;
extern const sweet::parser::ParserState shader_parser_state_234;
extern const sweet::parser::ParserState shader_parser_state_235;
extern const sweet::parser::ParserState shader_parser_state_236;
extern const sweet::parser::ParserState shader_parser_state_237;
extern const sweet::parser::ParserState shader_parser_state_238;
extern const sweet::parser::ParserState shader_parser_state_239;
extern const sweet::parser::ParserState shader_parser_state_240;
extern const sweet::parser::ParserState shader_parser_state_241;
extern const sweet::parser::ParserState shader_parser_state_242;
extern const sweet::parser::ParserState shader_parser_state_243;
extern const sweet::parser::ParserState shader_parser_state_244;
extern const sweet::parser::ParserState shader_parser_state_245;
extern const sweet::parser::ParserState shader_parser_state_246;
extern const sweet::parser::ParserState shader_parser_state_247;
extern const sweet::parser::ParserState shader_parser_state_248;
extern const sweet::parser::ParserState shader_parser_state_249;
extern const sweet::parser::ParserState shader_parser_state_250;
extern const sweet::parser::ParserState shader_parser_state_251;
extern const sweet::parser::ParserState shader_parser_state_252;

/*
0:
. definitions ; dot_end
. unit ; dot_end
. definitions definition ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. definition ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. shader_type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. light_terminal ; identifier
. surface_terminal ; identifier
. volume_terminal ; identifier
. displacement_terminal ; identifier
. imager_terminal ; identifier
. float_terminal ; identifier
. string_terminal ; identifier
. color_terminal ; identifier
. point_terminal ; identifier
. vector_terminal ; identifier
. normal_terminal ; identifier
. matrix_terminal ; identifier
. void_terminal ; identifier
shift to 54 on color_terminal ; 
shift to 55 on point_terminal ; 
shift to 52 on float_terminal ; 
shift to 53 on string_terminal ; 
shift to 56 on vector_terminal ; 
reduce to definitions on dot_end ; 
shift to 57 on normal_terminal ; 
shift to 58 on matrix_terminal ; 
shift to 59 on void_terminal ; 
shift to 47 on light_terminal ; 
shift to 48 on surface_terminal ; 
shift to 49 on volume_terminal ; 
shift to 50 on displacement_terminal ; 
shift to 51 on imager_terminal ; 
shift to 2 on unit ; 
shift to 1 on definitions ; 
shift to 4 on definition ; 
shift to 5 on shader_type ; 
shift to 13 on type ; 

*/

const sweet::parser::ParserTransition shader_parser_state_0_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_54, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_55, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_52, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_53, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_56, NULL },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_4 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_57, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_58, NULL },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_59, NULL },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_47, NULL },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_48, NULL },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_49, NULL },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_50, NULL },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_51, NULL },
    { shader_SYMBOL_unit, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_2, NULL },
    { shader_SYMBOL_definitions, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_1, NULL },
    { shader_SYMBOL_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_4, NULL },
    { shader_SYMBOL_shader_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_5, NULL },
    { shader_SYMBOL_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_13, NULL },
};


const sweet::parser::ParserState shader_parser_state_0 =
{
    shader_parser_state_0_transitions,
    shader_parser_state_0_transitions + 19
};

/*
1:
definitions . ; dot_end
definitions . definition ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. shader_type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. light_terminal ; identifier
. surface_terminal ; identifier
. volume_terminal ; identifier
. displacement_terminal ; identifier
. imager_terminal ; identifier
. float_terminal ; identifier
. string_terminal ; identifier
. color_terminal ; identifier
. point_terminal ; identifier
. vector_terminal ; identifier
. normal_terminal ; identifier
. matrix_terminal ; identifier
. void_terminal ; identifier
shift to 54 on color_terminal ; 
shift to 55 on point_terminal ; 
shift to 52 on float_terminal ; 
shift to 53 on string_terminal ; 
shift to 56 on vector_terminal ; 
reduce to unit on dot_end ; 
shift to 57 on normal_terminal ; 
shift to 58 on matrix_terminal ; 
shift to 59 on void_terminal ; 
shift to 47 on light_terminal ; 
shift to 48 on surface_terminal ; 
shift to 49 on volume_terminal ; 
shift to 50 on displacement_terminal ; 
shift to 51 on imager_terminal ; 
shift to 3 on definition ; 
shift to 5 on shader_type ; 
shift to 13 on type ; 

*/

const sweet::parser::ParserTransition shader_parser_state_1_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_54, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_55, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_52, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_53, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_56, NULL },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_1 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_57, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_58, NULL },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_59, NULL },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_47, NULL },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_48, NULL },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_49, NULL },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_50, NULL },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_51, NULL },
    { shader_SYMBOL_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_3, NULL },
    { shader_SYMBOL_shader_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_5, NULL },
    { shader_SYMBOL_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_13, NULL },
};


const sweet::parser::ParserState shader_parser_state_1 =
{
    shader_parser_state_1_transitions,
    shader_parser_state_1_transitions + 17
};

/*
2:
unit . ; dot_end
reduce to dot_start on dot_end ; 

*/

const sweet::parser::ParserTransition shader_parser_state_2_transitions[] = 
{
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_0 },
};


const sweet::parser::ParserState shader_parser_state_2 =
{
    shader_parser_state_2_transitions,
    shader_parser_state_2_transitions + 1
};

/*
3:
definitions definition . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
reduce to definitions on color_terminal ; 
reduce to definitions on point_terminal ; 
reduce to definitions on float_terminal ; 
reduce to definitions on string_terminal ; 
reduce to definitions on vector_terminal ; 
reduce to definitions on dot_end ; 
reduce to definitions on normal_terminal ; 
reduce to definitions on matrix_terminal ; 
reduce to definitions on void_terminal ; 
reduce to definitions on light_terminal ; 
reduce to definitions on surface_terminal ; 
reduce to definitions on volume_terminal ; 
reduce to definitions on displacement_terminal ; 
reduce to definitions on imager_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_3_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_2 },
};


const sweet::parser::ParserState shader_parser_state_3 =
{
    shader_parser_state_3_transitions,
    shader_parser_state_3_transitions + 14
};

/*
4:
definition . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
reduce to definitions on color_terminal ; 
reduce to definitions on point_terminal ; 
reduce to definitions on float_terminal ; 
reduce to definitions on string_terminal ; 
reduce to definitions on vector_terminal ; 
reduce to definitions on dot_end ; 
reduce to definitions on normal_terminal ; 
reduce to definitions on matrix_terminal ; 
reduce to definitions on void_terminal ; 
reduce to definitions on light_terminal ; 
reduce to definitions on surface_terminal ; 
reduce to definitions on volume_terminal ; 
reduce to definitions on displacement_terminal ; 
reduce to definitions on imager_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_4_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_3 },
};


const sweet::parser::ParserState shader_parser_state_4 =
{
    shader_parser_state_4_transitions,
    shader_parser_state_4_transitions + 14
};

/*
5:
shader_type . identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 6 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_5_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_6, NULL },
};


const sweet::parser::ParserState shader_parser_state_5 =
{
    shader_parser_state_5_transitions,
    shader_parser_state_5_transitions + 1
};

/*
6:
shader_type identifier . left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 7 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_6_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_7, NULL },
};


const sweet::parser::ParserState shader_parser_state_6 =
{
    shader_parser_state_6_transitions,
    shader_parser_state_6_transitions + 1
};

/*
7:
shader_type identifier left_paren_terminal . formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. formals formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output detail type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to output on color_terminal ; 
reduce to output on point_terminal ; 
reduce to formals on right_paren_terminal ; 
reduce to output on varying_terminal ; 
reduce to output on uniform_terminal ; 
shift to 62 on output_terminal ; 
reduce to output on float_terminal ; 
reduce to output on string_terminal ; 
reduce to output on vector_terminal ; 
reduce to output on normal_terminal ; 
reduce to output on matrix_terminal ; 
reduce to output on void_terminal ; 
shift to 8 on formals ; 
shift to 22 on formal ; 
shift to 23 on output ; 

*/

const sweet::parser::ParserTransition shader_parser_state_7_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_9 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_62, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_formals, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_8, NULL },
    { shader_SYMBOL_formal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_22, NULL },
    { shader_SYMBOL_output, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_23, NULL },
};


const sweet::parser::ParserState shader_parser_state_7 =
{
    shader_parser_state_7_transitions,
    shader_parser_state_7_transitions + 15
};

/*
8:
shader_type identifier left_paren_terminal formals . right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
formals . formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output detail type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to output on color_terminal ; 
reduce to output on point_terminal ; 
shift to 9 on right_paren_terminal ; 
reduce to output on varying_terminal ; 
reduce to output on uniform_terminal ; 
shift to 62 on output_terminal ; 
reduce to output on float_terminal ; 
reduce to output on string_terminal ; 
reduce to output on vector_terminal ; 
reduce to output on normal_terminal ; 
reduce to output on matrix_terminal ; 
reduce to output on void_terminal ; 
shift to 21 on formal ; 
shift to 23 on output ; 

*/

const sweet::parser::ParserTransition shader_parser_state_8_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_9, NULL },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_62, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_formal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_21, NULL },
    { shader_SYMBOL_output, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_23, NULL },
};


const sweet::parser::ParserState shader_parser_state_8 =
{
    shader_parser_state_8_transitions,
    shader_parser_state_8_transitions + 14
};

/*
9:
shader_type identifier left_paren_terminal formals right_paren_terminal . left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 10 on left_curly_brace_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_9_transitions[] = 
{
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_10, NULL },
};


const sweet::parser::ParserState shader_parser_state_9 =
{
    shader_parser_state_9_transitions,
    shader_parser_state_9_transitions + 1
};

/*
10:
shader_type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal . statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. statements statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to statements on color_terminal ; 
reduce to statements on point_terminal ; 
reduce to statements on varying_terminal ; 
reduce to statements on uniform_terminal ; 
reduce to statements on extern_terminal ; 
reduce to statements on float_terminal ; 
reduce to statements on string_terminal ; 
reduce to statements on vector_terminal ; 
reduce to statements on normal_terminal ; 
reduce to statements on matrix_terminal ; 
reduce to statements on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 11 on statements ; 
reduce to statements on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 65 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_10_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_statements, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_11, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_65, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_10 =
{
    shader_parser_state_10_transitions,
    shader_parser_state_10_transitions + 32
};

/*
11:
shader_type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements . right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
statements . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 12 on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 64 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_11_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_12, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_64, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_11 =
{
    shader_parser_state_11_transitions,
    shader_parser_state_11_transitions + 31
};

/*
12:
shader_type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
reduce to definition on color_terminal ; 
reduce to definition on point_terminal ; 
reduce to definition on float_terminal ; 
reduce to definition on string_terminal ; 
reduce to definition on vector_terminal ; 
reduce to definition on dot_end ; 
reduce to definition on normal_terminal ; 
reduce to definition on matrix_terminal ; 
reduce to definition on void_terminal ; 
reduce to definition on light_terminal ; 
reduce to definition on surface_terminal ; 
reduce to definition on volume_terminal ; 
reduce to definition on displacement_terminal ; 
reduce to definition on imager_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_12_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_5 },
};


const sweet::parser::ParserState shader_parser_state_12 =
{
    shader_parser_state_12_transitions,
    shader_parser_state_12_transitions + 14
};

/*
13:
type . identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 14 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_13_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_14, NULL },
};


const sweet::parser::ParserState shader_parser_state_13 =
{
    shader_parser_state_13_transitions,
    shader_parser_state_13_transitions + 1
};

/*
14:
type identifier . left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 15 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_14_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_15, NULL },
};


const sweet::parser::ParserState shader_parser_state_14 =
{
    shader_parser_state_14_transitions,
    shader_parser_state_14_transitions + 1
};

/*
15:
type identifier left_paren_terminal . formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. formals formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output detail type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to output on color_terminal ; 
reduce to output on point_terminal ; 
reduce to formals on right_paren_terminal ; 
reduce to output on varying_terminal ; 
reduce to output on uniform_terminal ; 
shift to 62 on output_terminal ; 
reduce to output on float_terminal ; 
reduce to output on string_terminal ; 
reduce to output on vector_terminal ; 
reduce to output on normal_terminal ; 
reduce to output on matrix_terminal ; 
reduce to output on void_terminal ; 
shift to 16 on formals ; 
shift to 22 on formal ; 
shift to 23 on output ; 

*/

const sweet::parser::ParserTransition shader_parser_state_15_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_9 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_62, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_formals, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_16, NULL },
    { shader_SYMBOL_formal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_22, NULL },
    { shader_SYMBOL_output, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_23, NULL },
};


const sweet::parser::ParserState shader_parser_state_15 =
{
    shader_parser_state_15_transitions,
    shader_parser_state_15_transitions + 15
};

/*
16:
type identifier left_paren_terminal formals . right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
formals . formal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output detail type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. output_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to output on color_terminal ; 
reduce to output on point_terminal ; 
shift to 17 on right_paren_terminal ; 
reduce to output on varying_terminal ; 
reduce to output on uniform_terminal ; 
shift to 62 on output_terminal ; 
reduce to output on float_terminal ; 
reduce to output on string_terminal ; 
reduce to output on vector_terminal ; 
reduce to output on normal_terminal ; 
reduce to output on matrix_terminal ; 
reduce to output on void_terminal ; 
shift to 21 on formal ; 
shift to 23 on output ; 

*/

const sweet::parser::ParserTransition shader_parser_state_16_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_17, NULL },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_62, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_33 },
    { shader_SYMBOL_formal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_21, NULL },
    { shader_SYMBOL_output, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_23, NULL },
};


const sweet::parser::ParserState shader_parser_state_16 =
{
    shader_parser_state_16_transitions,
    shader_parser_state_16_transitions + 14
};

/*
17:
type identifier left_paren_terminal formals right_paren_terminal . left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
shift to 18 on left_curly_brace_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_17_transitions[] = 
{
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_18, NULL },
};


const sweet::parser::ParserState shader_parser_state_17 =
{
    shader_parser_state_17_transitions,
    shader_parser_state_17_transitions + 1
};

/*
18:
type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal . statements right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. statements statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to statements on color_terminal ; 
reduce to statements on point_terminal ; 
reduce to statements on varying_terminal ; 
reduce to statements on uniform_terminal ; 
reduce to statements on extern_terminal ; 
reduce to statements on float_terminal ; 
reduce to statements on string_terminal ; 
reduce to statements on vector_terminal ; 
reduce to statements on normal_terminal ; 
reduce to statements on matrix_terminal ; 
reduce to statements on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 19 on statements ; 
reduce to statements on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 65 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_18_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_statements, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_19, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_65, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_18 =
{
    shader_parser_state_18_transitions,
    shader_parser_state_18_transitions + 32
};

/*
19:
type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements . right_curly_brace_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
statements . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 20 on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 64 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_19_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_20, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_64, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_19 =
{
    shader_parser_state_19_transitions,
    shader_parser_state_19_transitions + 31
};

/*
20:
type identifier left_paren_terminal formals right_paren_terminal left_curly_brace_terminal statements right_curly_brace_terminal . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, dot_end, normal_terminal, matrix_terminal, void_terminal, light_terminal, surface_terminal, volume_terminal, displacement_terminal, imager_terminal
reduce to definition on color_terminal ; 
reduce to definition on point_terminal ; 
reduce to definition on float_terminal ; 
reduce to definition on string_terminal ; 
reduce to definition on vector_terminal ; 
reduce to definition on dot_end ; 
reduce to definition on normal_terminal ; 
reduce to definition on matrix_terminal ; 
reduce to definition on void_terminal ; 
reduce to definition on light_terminal ; 
reduce to definition on surface_terminal ; 
reduce to definition on volume_terminal ; 
reduce to definition on displacement_terminal ; 
reduce to definition on imager_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_20_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_dot_end, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_light_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_surface_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_volume_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_displacement_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
    { shader_SYMBOL_imager_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_6 },
};


const sweet::parser::ParserState shader_parser_state_20 =
{
    shader_parser_state_20_transitions,
    shader_parser_state_20_transitions + 14
};

/*
21:
formals formal . ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to formals on color_terminal ; 
reduce to formals on point_terminal ; 
reduce to formals on right_paren_terminal ; 
reduce to formals on varying_terminal ; 
reduce to formals on uniform_terminal ; 
reduce to formals on output_terminal ; 
reduce to formals on float_terminal ; 
reduce to formals on string_terminal ; 
reduce to formals on vector_terminal ; 
reduce to formals on normal_terminal ; 
reduce to formals on matrix_terminal ; 
reduce to formals on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_21_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_7 },
};


const sweet::parser::ParserState shader_parser_state_21 =
{
    shader_parser_state_21_transitions,
    shader_parser_state_21_transitions + 12
};

/*
22:
formal . ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to formals on color_terminal ; 
reduce to formals on point_terminal ; 
reduce to formals on right_paren_terminal ; 
reduce to formals on varying_terminal ; 
reduce to formals on uniform_terminal ; 
reduce to formals on output_terminal ; 
reduce to formals on float_terminal ; 
reduce to formals on string_terminal ; 
reduce to formals on vector_terminal ; 
reduce to formals on normal_terminal ; 
reduce to formals on matrix_terminal ; 
reduce to formals on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_22_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_8 },
};


const sweet::parser::ParserState shader_parser_state_22 =
{
    shader_parser_state_22_transitions,
    shader_parser_state_22_transitions + 12
};

/*
23:
output . detail type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. varying_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. uniform_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to detail on color_terminal ; 
reduce to detail on point_terminal ; 
shift to 60 on varying_terminal ; 
shift to 61 on uniform_terminal ; 
reduce to detail on float_terminal ; 
reduce to detail on string_terminal ; 
reduce to detail on vector_terminal ; 
reduce to detail on normal_terminal ; 
reduce to detail on matrix_terminal ; 
reduce to detail on void_terminal ; 
shift to 24 on detail ; 

*/

const sweet::parser::ParserTransition shader_parser_state_23_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_60, NULL },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_61, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_detail, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_24, NULL },
};


const sweet::parser::ParserState shader_parser_state_23 =
{
    shader_parser_state_23_transitions,
    shader_parser_state_23_transitions + 11
};

/*
24:
output detail . type definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. float_terminal ; identifier
. string_terminal ; identifier
. color_terminal ; identifier
. point_terminal ; identifier
. vector_terminal ; identifier
. normal_terminal ; identifier
. matrix_terminal ; identifier
. void_terminal ; identifier
shift to 54 on color_terminal ; 
shift to 55 on point_terminal ; 
shift to 52 on float_terminal ; 
shift to 53 on string_terminal ; 
shift to 56 on vector_terminal ; 
shift to 57 on normal_terminal ; 
shift to 58 on matrix_terminal ; 
shift to 59 on void_terminal ; 
shift to 25 on type ; 

*/

const sweet::parser::ParserTransition shader_parser_state_24_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_54, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_55, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_52, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_53, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_56, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_57, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_58, NULL },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_59, NULL },
    { shader_SYMBOL_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_25, NULL },
};


const sweet::parser::ParserState shader_parser_state_24 =
{
    shader_parser_state_24_transitions,
    shader_parser_state_24_transitions + 9
};

/*
25:
output detail type . definition_expressions semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. definition_expressions comma_terminal definition_expression ; comma_terminal, semi_colon_terminal
. definition_expression ; comma_terminal, semi_colon_terminal
. identifier ; comma_terminal, semi_colon_terminal
. identifier eq_terminal expression ; comma_terminal, semi_colon_terminal
shift to 26 on definition_expressions ; 
shift to 43 on definition_expression ; 
shift to 44 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_25_transitions[] = 
{
    { shader_SYMBOL_definition_expressions, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_26, NULL },
    { shader_SYMBOL_definition_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_43, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_44, NULL },
};


const sweet::parser::ParserState shader_parser_state_25 =
{
    shader_parser_state_25_transitions,
    shader_parser_state_25_transitions + 3
};

/*
26:
output detail type definition_expressions . semi_colon_terminal ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
definition_expressions . comma_terminal definition_expression ; comma_terminal, semi_colon_terminal
shift to 41 on comma_terminal ; 
shift to 27 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_26_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_41, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_27, NULL },
};


const sweet::parser::ParserState shader_parser_state_26 =
{
    shader_parser_state_26_transitions,
    shader_parser_state_26_transitions + 2
};

/*
27:
output detail type definition_expressions semi_colon_terminal . ; color_terminal, point_terminal, right_paren_terminal, varying_terminal, uniform_terminal, output_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to formal on color_terminal ; 
reduce to formal on point_terminal ; 
reduce to formal on right_paren_terminal ; 
reduce to formal on varying_terminal ; 
reduce to formal on uniform_terminal ; 
reduce to formal on output_terminal ; 
reduce to formal on float_terminal ; 
reduce to formal on string_terminal ; 
reduce to formal on vector_terminal ; 
reduce to formal on normal_terminal ; 
reduce to formal on matrix_terminal ; 
reduce to formal on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_27_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_output_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_10 },
};


const sweet::parser::ParserState shader_parser_state_27 =
{
    shader_parser_state_27_transitions,
    shader_parser_state_27_transitions + 12
};

/*
28:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. statements statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
left_curly_brace_terminal . statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to statements on color_terminal ; 
reduce to statements on point_terminal ; 
reduce to statements on varying_terminal ; 
reduce to statements on uniform_terminal ; 
reduce to statements on extern_terminal ; 
reduce to statements on float_terminal ; 
reduce to statements on string_terminal ; 
reduce to statements on vector_terminal ; 
reduce to statements on normal_terminal ; 
reduce to statements on matrix_terminal ; 
reduce to statements on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 29 on statements ; 
reduce to statements on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 65 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_28_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_statements, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_29, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_38 },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_65, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_28 =
{
    shader_parser_state_28_transitions,
    shader_parser_state_28_transitions + 32
};

/*
29:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
statements . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
left_curly_brace_terminal statements . right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 66 on right_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 64 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_29_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_66, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_64, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_29 =
{
    shader_parser_state_29_transitions,
    shader_parser_state_29_transitions + 31
};

/*
30:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal expression right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal expression right_paren_terminal . statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 85 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_30_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_85, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_30 =
{
    shader_parser_state_30_transitions,
    shader_parser_state_30_transitions + 30
};

/*
31:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 86 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_31_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_86, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_31 =
{
    shader_parser_state_31_transitions,
    shader_parser_state_31_transitions + 30
};

/*
32:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
while_terminal left_paren_terminal expression right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 90 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_32_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_90, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_32 =
{
    shader_parser_state_32_transitions,
    shader_parser_state_32_transitions + 30
};

/*
33:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 98 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_33_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_98, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_33 =
{
    shader_parser_state_33_transitions,
    shader_parser_state_33_transitions + 30
};

/*
34:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
solar left_paren_terminal parameters right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 102 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_34_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_102, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_34 =
{
    shader_parser_state_34_transitions,
    shader_parser_state_34_transitions + 30
};

/*
35:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
illuminate left_paren_terminal parameters right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 106 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_35_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_106, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_35 =
{
    shader_parser_state_35_transitions,
    shader_parser_state_35_transitions + 30
};

/*
36:
. extern detail type definition_expressions ; semi_colon_terminal
. extern_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. left_curly_brace_terminal statements right_curly_brace_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. variable_definition semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. assign_expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. call semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. return_terminal expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. break_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. continue_terminal optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. while_terminal left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminate left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. illuminance left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
illuminance left_paren_terminal parameters right_paren_terminal . statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. solar_terminal ; left_paren_terminal
. illuminate_terminal ; left_paren_terminal
. illuminance_terminal ; left_paren_terminal
. identifier star__eq_terminal expression ; semi_colon_terminal
. identifier slash__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
. identifier eq_terminal expression ; semi_colon_terminal
. identifier plus__eq_terminal expression ; semi_colon_terminal
. identifier minus__eq_terminal expression ; semi_colon_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
shift to 63 on extern_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 
shift to 73 on return_terminal ; 
shift to 76 on break_terminal ; 
shift to 79 on continue_terminal ; 
shift to 82 on if_terminal ; 
shift to 87 on while_terminal ; 
shift to 91 on for_terminal ; 
shift to 111 on solar_terminal ; 
shift to 113 on illuminance_terminal ; 
shift to 112 on illuminate_terminal ; 
shift to 28 on left_curly_brace_terminal ; 
shift to 67 on variable_definition ; 
shift to 37 on extern ; 
shift to 110 on statement ; 
shift to 69 on assign_expression ; 
shift to 71 on call ; 
shift to 99 on solar ; 
shift to 103 on illuminate ; 
shift to 107 on illuminance ; 
shift to 224 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_36_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_63, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_35 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_73, NULL },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_76, NULL },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_79, NULL },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_82, NULL },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_87, NULL },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_91, NULL },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_111, NULL },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_113, NULL },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_112, NULL },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_28, NULL },
    { shader_SYMBOL_variable_definition, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_67, NULL },
    { shader_SYMBOL_extern, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_37, NULL },
    { shader_SYMBOL_statement, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_110, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_69, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_71, NULL },
    { shader_SYMBOL_solar, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_99, NULL },
    { shader_SYMBOL_illuminate, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_103, NULL },
    { shader_SYMBOL_illuminance, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_107, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_224, NULL },
};


const sweet::parser::ParserState shader_parser_state_36 =
{
    shader_parser_state_36_transitions,
    shader_parser_state_36_transitions + 30
};

/*
37:
extern . detail type definition_expressions ; semi_colon_terminal
. varying_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. uniform_terminal ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
. ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to detail on color_terminal ; 
reduce to detail on point_terminal ; 
shift to 60 on varying_terminal ; 
shift to 61 on uniform_terminal ; 
reduce to detail on float_terminal ; 
reduce to detail on string_terminal ; 
reduce to detail on vector_terminal ; 
reduce to detail on normal_terminal ; 
reduce to detail on matrix_terminal ; 
reduce to detail on void_terminal ; 
shift to 38 on detail ; 

*/

const sweet::parser::ParserTransition shader_parser_state_37_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_60, NULL },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_61, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_31 },
    { shader_SYMBOL_detail, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_38, NULL },
};


const sweet::parser::ParserState shader_parser_state_37 =
{
    shader_parser_state_37_transitions,
    shader_parser_state_37_transitions + 11
};

/*
38:
extern detail . type definition_expressions ; semi_colon_terminal
. float_terminal ; identifier
. string_terminal ; identifier
. color_terminal ; identifier
. point_terminal ; identifier
. vector_terminal ; identifier
. normal_terminal ; identifier
. matrix_terminal ; identifier
. void_terminal ; identifier
shift to 54 on color_terminal ; 
shift to 55 on point_terminal ; 
shift to 52 on float_terminal ; 
shift to 53 on string_terminal ; 
shift to 56 on vector_terminal ; 
shift to 57 on normal_terminal ; 
shift to 58 on matrix_terminal ; 
shift to 59 on void_terminal ; 
shift to 39 on type ; 

*/

const sweet::parser::ParserTransition shader_parser_state_38_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_54, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_55, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_52, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_53, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_56, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_57, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_58, NULL },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_59, NULL },
    { shader_SYMBOL_type, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_39, NULL },
};


const sweet::parser::ParserState shader_parser_state_38 =
{
    shader_parser_state_38_transitions,
    shader_parser_state_38_transitions + 9
};

/*
39:
extern detail type . definition_expressions ; semi_colon_terminal
. definition_expressions comma_terminal definition_expression ; comma_terminal, semi_colon_terminal
. definition_expression ; comma_terminal, semi_colon_terminal
. identifier ; comma_terminal, semi_colon_terminal
. identifier eq_terminal expression ; comma_terminal, semi_colon_terminal
shift to 40 on definition_expressions ; 
shift to 43 on definition_expression ; 
shift to 44 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_39_transitions[] = 
{
    { shader_SYMBOL_definition_expressions, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_40, NULL },
    { shader_SYMBOL_definition_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_43, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_44, NULL },
};


const sweet::parser::ParserState shader_parser_state_39 =
{
    shader_parser_state_39_transitions,
    shader_parser_state_39_transitions + 3
};

/*
40:
extern detail type definition_expressions . ; semi_colon_terminal
definition_expressions . comma_terminal definition_expression ; comma_terminal, semi_colon_terminal
shift to 41 on comma_terminal ; 
reduce to variable_definition on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_40_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_41, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_11 },
};


const sweet::parser::ParserState shader_parser_state_40 =
{
    shader_parser_state_40_transitions,
    shader_parser_state_40_transitions + 2
};

/*
41:
definition_expressions comma_terminal . definition_expression ; comma_terminal, semi_colon_terminal
. identifier ; comma_terminal, semi_colon_terminal
. identifier eq_terminal expression ; comma_terminal, semi_colon_terminal
shift to 42 on definition_expression ; 
shift to 44 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_41_transitions[] = 
{
    { shader_SYMBOL_definition_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_42, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_44, NULL },
};


const sweet::parser::ParserState shader_parser_state_41 =
{
    shader_parser_state_41_transitions,
    shader_parser_state_41_transitions + 2
};

/*
42:
definition_expressions comma_terminal definition_expression . ; comma_terminal, semi_colon_terminal
reduce to definition_expressions on comma_terminal ; 
reduce to definition_expressions on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_42_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_12 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_12 },
};


const sweet::parser::ParserState shader_parser_state_42 =
{
    shader_parser_state_42_transitions,
    shader_parser_state_42_transitions + 2
};

/*
43:
definition_expression . ; comma_terminal, semi_colon_terminal
reduce to definition_expressions on comma_terminal ; 
reduce to definition_expressions on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_43_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_13 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_13 },
};


const sweet::parser::ParserState shader_parser_state_43 =
{
    shader_parser_state_43_transitions,
    shader_parser_state_43_transitions + 2
};

/*
44:
identifier . ; comma_terminal, semi_colon_terminal
identifier . eq_terminal expression ; comma_terminal, semi_colon_terminal
reduce to definition_expression on comma_terminal ; 
shift to 45 on eq_terminal ; 
reduce to definition_expression on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_44_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_14 },
    { shader_SYMBOL_eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_45, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_14 },
};


const sweet::parser::ParserState shader_parser_state_44 =
{
    shader_parser_state_44_transitions,
    shader_parser_state_44_transitions + 3
};

/*
45:
identifier eq_terminal . expression ; comma_terminal, semi_colon_terminal
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 46 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_45_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_46, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_45 =
{
    shader_parser_state_45_transitions,
    shader_parser_state_45_transitions + 23
};

/*
46:
identifier eq_terminal expression . ; comma_terminal, semi_colon_terminal
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
reduce to definition_expression on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to definition_expression on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_46_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_15 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_15 },
};


const sweet::parser::ParserState shader_parser_state_46 =
{
    shader_parser_state_46_transitions,
    shader_parser_state_46_transitions + 17
};

/*
47:
light_terminal . ; identifier
reduce to shader_type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_47_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_16 },
};


const sweet::parser::ParserState shader_parser_state_47 =
{
    shader_parser_state_47_transitions,
    shader_parser_state_47_transitions + 1
};

/*
48:
surface_terminal . ; identifier
reduce to shader_type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_48_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_17 },
};


const sweet::parser::ParserState shader_parser_state_48 =
{
    shader_parser_state_48_transitions,
    shader_parser_state_48_transitions + 1
};

/*
49:
volume_terminal . ; identifier
reduce to shader_type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_49_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_18 },
};


const sweet::parser::ParserState shader_parser_state_49 =
{
    shader_parser_state_49_transitions,
    shader_parser_state_49_transitions + 1
};

/*
50:
displacement_terminal . ; identifier
reduce to shader_type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_50_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_19 },
};


const sweet::parser::ParserState shader_parser_state_50 =
{
    shader_parser_state_50_transitions,
    shader_parser_state_50_transitions + 1
};

/*
51:
imager_terminal . ; identifier
reduce to shader_type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_51_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_20 },
};


const sweet::parser::ParserState shader_parser_state_51 =
{
    shader_parser_state_51_transitions,
    shader_parser_state_51_transitions + 1
};

/*
52:
float_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_52_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_21 },
};


const sweet::parser::ParserState shader_parser_state_52 =
{
    shader_parser_state_52_transitions,
    shader_parser_state_52_transitions + 1
};

/*
53:
string_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_53_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_22 },
};


const sweet::parser::ParserState shader_parser_state_53 =
{
    shader_parser_state_53_transitions,
    shader_parser_state_53_transitions + 1
};

/*
54:
color_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_54_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_23 },
};


const sweet::parser::ParserState shader_parser_state_54 =
{
    shader_parser_state_54_transitions,
    shader_parser_state_54_transitions + 1
};

/*
55:
point_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_55_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_24 },
};


const sweet::parser::ParserState shader_parser_state_55 =
{
    shader_parser_state_55_transitions,
    shader_parser_state_55_transitions + 1
};

/*
56:
vector_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_56_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_25 },
};


const sweet::parser::ParserState shader_parser_state_56 =
{
    shader_parser_state_56_transitions,
    shader_parser_state_56_transitions + 1
};

/*
57:
normal_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_57_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_26 },
};


const sweet::parser::ParserState shader_parser_state_57 =
{
    shader_parser_state_57_transitions,
    shader_parser_state_57_transitions + 1
};

/*
58:
matrix_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_58_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_27 },
};


const sweet::parser::ParserState shader_parser_state_58 =
{
    shader_parser_state_58_transitions,
    shader_parser_state_58_transitions + 1
};

/*
59:
void_terminal . ; identifier
reduce to type on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_59_transitions[] = 
{
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_28 },
};


const sweet::parser::ParserState shader_parser_state_59 =
{
    shader_parser_state_59_transitions,
    shader_parser_state_59_transitions + 1
};

/*
60:
varying_terminal . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to detail on color_terminal ; 
reduce to detail on point_terminal ; 
reduce to detail on float_terminal ; 
reduce to detail on string_terminal ; 
reduce to detail on vector_terminal ; 
reduce to detail on normal_terminal ; 
reduce to detail on matrix_terminal ; 
reduce to detail on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_60_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_29 },
};


const sweet::parser::ParserState shader_parser_state_60 =
{
    shader_parser_state_60_transitions,
    shader_parser_state_60_transitions + 8
};

/*
61:
uniform_terminal . ; color_terminal, point_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to detail on color_terminal ; 
reduce to detail on point_terminal ; 
reduce to detail on float_terminal ; 
reduce to detail on string_terminal ; 
reduce to detail on vector_terminal ; 
reduce to detail on normal_terminal ; 
reduce to detail on matrix_terminal ; 
reduce to detail on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_61_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_30 },
};


const sweet::parser::ParserState shader_parser_state_61 =
{
    shader_parser_state_61_transitions,
    shader_parser_state_61_transitions + 8
};

/*
62:
output_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to output on color_terminal ; 
reduce to output on point_terminal ; 
reduce to output on varying_terminal ; 
reduce to output on uniform_terminal ; 
reduce to output on float_terminal ; 
reduce to output on string_terminal ; 
reduce to output on vector_terminal ; 
reduce to output on normal_terminal ; 
reduce to output on matrix_terminal ; 
reduce to output on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_62_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_32 },
};


const sweet::parser::ParserState shader_parser_state_62 =
{
    shader_parser_state_62_transitions,
    shader_parser_state_62_transitions + 10
};

/*
63:
extern_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal
reduce to extern on color_terminal ; 
reduce to extern on point_terminal ; 
reduce to extern on varying_terminal ; 
reduce to extern on uniform_terminal ; 
reduce to extern on float_terminal ; 
reduce to extern on string_terminal ; 
reduce to extern on vector_terminal ; 
reduce to extern on normal_terminal ; 
reduce to extern on matrix_terminal ; 
reduce to extern on void_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_63_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_34 },
};


const sweet::parser::ParserState shader_parser_state_63 =
{
    shader_parser_state_63_transitions,
    shader_parser_state_63_transitions + 10
};

/*
64:
statements statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
reduce to statements on color_terminal ; 
reduce to statements on point_terminal ; 
reduce to statements on varying_terminal ; 
reduce to statements on uniform_terminal ; 
reduce to statements on extern_terminal ; 
reduce to statements on float_terminal ; 
reduce to statements on string_terminal ; 
reduce to statements on vector_terminal ; 
reduce to statements on normal_terminal ; 
reduce to statements on matrix_terminal ; 
reduce to statements on void_terminal ; 
reduce to statements on return_terminal ; 
reduce to statements on break_terminal ; 
reduce to statements on continue_terminal ; 
reduce to statements on if_terminal ; 
reduce to statements on while_terminal ; 
reduce to statements on for_terminal ; 
reduce to statements on solar_terminal ; 
reduce to statements on illuminance_terminal ; 
reduce to statements on illuminate_terminal ; 
reduce to statements on left_curly_brace_terminal ; 
reduce to statements on right_curly_brace_terminal ; 
reduce to statements on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_64_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_36 },
};


const sweet::parser::ParserState shader_parser_state_64 =
{
    shader_parser_state_64_transitions,
    shader_parser_state_64_transitions + 23
};

/*
65:
statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, right_curly_brace_terminal, identifier
reduce to statements on color_terminal ; 
reduce to statements on point_terminal ; 
reduce to statements on varying_terminal ; 
reduce to statements on uniform_terminal ; 
reduce to statements on extern_terminal ; 
reduce to statements on float_terminal ; 
reduce to statements on string_terminal ; 
reduce to statements on vector_terminal ; 
reduce to statements on normal_terminal ; 
reduce to statements on matrix_terminal ; 
reduce to statements on void_terminal ; 
reduce to statements on return_terminal ; 
reduce to statements on break_terminal ; 
reduce to statements on continue_terminal ; 
reduce to statements on if_terminal ; 
reduce to statements on while_terminal ; 
reduce to statements on for_terminal ; 
reduce to statements on solar_terminal ; 
reduce to statements on illuminance_terminal ; 
reduce to statements on illuminate_terminal ; 
reduce to statements on left_curly_brace_terminal ; 
reduce to statements on right_curly_brace_terminal ; 
reduce to statements on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_65_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_37 },
};


const sweet::parser::ParserState shader_parser_state_65 =
{
    shader_parser_state_65_transitions,
    shader_parser_state_65_transitions + 23
};

/*
66:
left_curly_brace_terminal statements right_curly_brace_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_66_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_39 },
};


const sweet::parser::ParserState shader_parser_state_66 =
{
    shader_parser_state_66_transitions,
    shader_parser_state_66_transitions + 24
};

/*
67:
variable_definition . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 68 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_67_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_68, NULL },
};


const sweet::parser::ParserState shader_parser_state_67 =
{
    shader_parser_state_67_transitions,
    shader_parser_state_67_transitions + 1
};

/*
68:
variable_definition semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_68_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_40 },
};


const sweet::parser::ParserState shader_parser_state_68 =
{
    shader_parser_state_68_transitions,
    shader_parser_state_68_transitions + 24
};

/*
69:
assign_expression . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 70 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_69_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_70, NULL },
};


const sweet::parser::ParserState shader_parser_state_69 =
{
    shader_parser_state_69_transitions,
    shader_parser_state_69_transitions + 1
};

/*
70:
assign_expression semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_70_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_41 },
};


const sweet::parser::ParserState shader_parser_state_70 =
{
    shader_parser_state_70_transitions,
    shader_parser_state_70_transitions + 24
};

/*
71:
call . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 72 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_71_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_72, NULL },
};


const sweet::parser::ParserState shader_parser_state_71 =
{
    shader_parser_state_71_transitions,
    shader_parser_state_71_transitions + 1
};

/*
72:
call semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_72_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_42 },
};


const sweet::parser::ParserState shader_parser_state_72 =
{
    shader_parser_state_72_transitions,
    shader_parser_state_72_transitions + 24
};

/*
73:
return_terminal . expression semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. integer ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. real ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. string_literal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. call ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. assign_expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. triple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. sixteentuple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. typecast expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 74 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_73_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_74, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_73 =
{
    shader_parser_state_73_transitions,
    shader_parser_state_73_transitions + 23
};

/*
74:
return_terminal expression . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
shift to 75 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_74_transitions[] = 
{
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_75, NULL },
};


const sweet::parser::ParserState shader_parser_state_74 =
{
    shader_parser_state_74_transitions,
    shader_parser_state_74_transitions + 16
};

/*
75:
return_terminal expression semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_75_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_43 },
};


const sweet::parser::ParserState shader_parser_state_75 =
{
    shader_parser_state_75_transitions,
    shader_parser_state_75_transitions + 24
};

/*
76:
break_terminal . optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. integer ; semi_colon_terminal
. ; semi_colon_terminal
reduce to optional_integer on semi_colon_terminal ; 
shift to 77 on optional_integer ; 
shift to 237 on integer ; 

*/

const sweet::parser::ParserTransition shader_parser_state_76_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_85 },
    { shader_SYMBOL_optional_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_77, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_237, NULL },
};


const sweet::parser::ParserState shader_parser_state_76 =
{
    shader_parser_state_76_transitions,
    shader_parser_state_76_transitions + 3
};

/*
77:
break_terminal optional_integer . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 78 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_77_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_78, NULL },
};


const sweet::parser::ParserState shader_parser_state_77 =
{
    shader_parser_state_77_transitions,
    shader_parser_state_77_transitions + 1
};

/*
78:
break_terminal optional_integer semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_78_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_44 },
};


const sweet::parser::ParserState shader_parser_state_78 =
{
    shader_parser_state_78_transitions,
    shader_parser_state_78_transitions + 24
};

/*
79:
continue_terminal . optional_integer semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. integer ; semi_colon_terminal
. ; semi_colon_terminal
reduce to optional_integer on semi_colon_terminal ; 
shift to 80 on optional_integer ; 
shift to 237 on integer ; 

*/

const sweet::parser::ParserTransition shader_parser_state_79_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_85 },
    { shader_SYMBOL_optional_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_80, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_237, NULL },
};


const sweet::parser::ParserState shader_parser_state_79 =
{
    shader_parser_state_79_transitions,
    shader_parser_state_79_transitions + 3
};

/*
80:
continue_terminal optional_integer . semi_colon_terminal ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 81 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_80_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_81, NULL },
};


const sweet::parser::ParserState shader_parser_state_80 =
{
    shader_parser_state_80_transitions,
    shader_parser_state_80_transitions + 1
};

/*
81:
continue_terminal optional_integer semi_colon_terminal . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_81_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_45 },
};


const sweet::parser::ParserState shader_parser_state_81 =
{
    shader_parser_state_81_transitions,
    shader_parser_state_81_transitions + 24
};

/*
82:
if_terminal . left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal . left_paren_terminal expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 83 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_82_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_83, NULL },
};


const sweet::parser::ParserState shader_parser_state_82 =
{
    shader_parser_state_82_transitions,
    shader_parser_state_82_transitions + 1
};

/*
83:
if_terminal left_paren_terminal . expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal . expression right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 84 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_83_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_84, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_83 =
{
    shader_parser_state_83_transitions,
    shader_parser_state_83_transitions + 23
};

/*
84:
if_terminal left_paren_terminal expression . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal expression . right_paren_terminal statement else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 30 on right_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_84_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_30, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_84 =
{
    shader_parser_state_84_transitions,
    shader_parser_state_84_transitions + 16
};

/*
85:
if_terminal left_paren_terminal expression right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
if_terminal left_paren_terminal expression right_paren_terminal statement . else_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
shift to 31 on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_85_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_31, NULL },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_46 },
};


const sweet::parser::ParserState shader_parser_state_85 =
{
    shader_parser_state_85_transitions,
    shader_parser_state_85_transitions + 24
};

/*
86:
if_terminal left_paren_terminal expression right_paren_terminal statement else_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_86_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_47 },
};


const sweet::parser::ParserState shader_parser_state_86 =
{
    shader_parser_state_86_transitions,
    shader_parser_state_86_transitions + 24
};

/*
87:
while_terminal . left_paren_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 88 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_87_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_88, NULL },
};


const sweet::parser::ParserState shader_parser_state_87 =
{
    shader_parser_state_87_transitions,
    shader_parser_state_87_transitions + 1
};

/*
88:
while_terminal left_paren_terminal . expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 89 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_88_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_89, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_88 =
{
    shader_parser_state_88_transitions,
    shader_parser_state_88_transitions + 23
};

/*
89:
while_terminal left_paren_terminal expression . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 32 on right_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_89_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_32, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_89 =
{
    shader_parser_state_89_transitions,
    shader_parser_state_89_transitions + 16
};

/*
90:
while_terminal left_paren_terminal expression right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_90_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_48 },
};


const sweet::parser::ParserState shader_parser_state_90 =
{
    shader_parser_state_90_transitions,
    shader_parser_state_90_transitions + 24
};

/*
91:
for_terminal . left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 92 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_91_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_92, NULL },
};


const sweet::parser::ParserState shader_parser_state_91 =
{
    shader_parser_state_91_transitions,
    shader_parser_state_91_transitions + 1
};

/*
92:
for_terminal left_paren_terminal . expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. integer ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. real ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. string_literal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. call ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. assign_expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. triple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. sixteentuple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. typecast expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 93 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_92_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_93, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_92 =
{
    shader_parser_state_92_transitions,
    shader_parser_state_92_transitions + 23
};

/*
93:
for_terminal left_paren_terminal expression . semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
shift to 94 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_93_transitions[] = 
{
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_94, NULL },
};


const sweet::parser::ParserState shader_parser_state_93 =
{
    shader_parser_state_93_transitions,
    shader_parser_state_93_transitions + 16
};

/*
94:
for_terminal left_paren_terminal expression semi_colon_terminal . expression semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. integer ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. real ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. string_literal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. call ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. assign_expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. triple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. sixteentuple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. expression question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. typecast expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
. identifier minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 95 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_94_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_95, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_94 =
{
    shader_parser_state_94_transitions,
    shader_parser_state_94_transitions + 23
};

/*
95:
for_terminal left_paren_terminal expression semi_colon_terminal expression . semi_colon_terminal expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
expression . question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
shift to 96 on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_95_transitions[] = 
{
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_96, NULL },
};


const sweet::parser::ParserState shader_parser_state_95 =
{
    shader_parser_state_95_transitions,
    shader_parser_state_95_transitions + 16
};

/*
96:
for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal . expression right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 97 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_96_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_97, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_96 =
{
    shader_parser_state_96_transitions,
    shader_parser_state_96_transitions + 23
};

/*
97:
for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
expression . dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 33 on right_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_97_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_33, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_97 =
{
    shader_parser_state_97_transitions,
    shader_parser_state_97_transitions + 16
};

/*
98:
for_terminal left_paren_terminal expression semi_colon_terminal expression semi_colon_terminal expression right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_98_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_49 },
};


const sweet::parser::ParserState shader_parser_state_98 =
{
    shader_parser_state_98_transitions,
    shader_parser_state_98_transitions + 24
};

/*
99:
solar . left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 100 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_99_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_100, NULL },
};


const sweet::parser::ParserState shader_parser_state_99 =
{
    shader_parser_state_99_transitions,
    shader_parser_state_99_transitions + 1
};

/*
100:
solar left_paren_terminal . parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 101 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_100_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_101, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_100 =
{
    shader_parser_state_100_transitions,
    shader_parser_state_100_transitions + 26
};

/*
101:
solar left_paren_terminal parameters . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
shift to 34 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_101_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_34, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_101 =
{
    shader_parser_state_101_transitions,
    shader_parser_state_101_transitions + 2
};

/*
102:
solar left_paren_terminal parameters right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_102_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_50 },
};


const sweet::parser::ParserState shader_parser_state_102 =
{
    shader_parser_state_102_transitions,
    shader_parser_state_102_transitions + 24
};

/*
103:
illuminate . left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 104 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_103_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_104, NULL },
};


const sweet::parser::ParserState shader_parser_state_103 =
{
    shader_parser_state_103_transitions,
    shader_parser_state_103_transitions + 1
};

/*
104:
illuminate left_paren_terminal . parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 105 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_104_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_105, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_104 =
{
    shader_parser_state_104_transitions,
    shader_parser_state_104_transitions + 26
};

/*
105:
illuminate left_paren_terminal parameters . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
shift to 35 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_105_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_35, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_105 =
{
    shader_parser_state_105_transitions,
    shader_parser_state_105_transitions + 2
};

/*
106:
illuminate left_paren_terminal parameters right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_106_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_51 },
};


const sweet::parser::ParserState shader_parser_state_106 =
{
    shader_parser_state_106_transitions,
    shader_parser_state_106_transitions + 24
};

/*
107:
illuminance . left_paren_terminal parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
shift to 108 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_107_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_108, NULL },
};


const sweet::parser::ParserState shader_parser_state_107 =
{
    shader_parser_state_107_transitions,
    shader_parser_state_107_transitions + 1
};

/*
108:
illuminance left_paren_terminal . parameters right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 109 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_108_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_109, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_108 =
{
    shader_parser_state_108_transitions,
    shader_parser_state_108_transitions + 26
};

/*
109:
illuminance left_paren_terminal parameters . right_paren_terminal statement ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
shift to 36 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_109_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_36, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_109 =
{
    shader_parser_state_109_transitions,
    shader_parser_state_109_transitions + 2
};

/*
110:
illuminance left_paren_terminal parameters right_paren_terminal statement . ; color_terminal, point_terminal, varying_terminal, uniform_terminal, extern_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, void_terminal, return_terminal, break_terminal, continue_terminal, if_terminal, while_terminal, for_terminal, solar_terminal, illuminance_terminal, illuminate_terminal, left_curly_brace_terminal, else_terminal, right_curly_brace_terminal, identifier
reduce to statement on color_terminal ; 
reduce to statement on point_terminal ; 
reduce to statement on varying_terminal ; 
reduce to statement on uniform_terminal ; 
reduce to statement on extern_terminal ; 
reduce to statement on float_terminal ; 
reduce to statement on string_terminal ; 
reduce to statement on vector_terminal ; 
reduce to statement on normal_terminal ; 
reduce to statement on matrix_terminal ; 
reduce to statement on void_terminal ; 
reduce to statement on return_terminal ; 
reduce to statement on break_terminal ; 
reduce to statement on continue_terminal ; 
reduce to statement on if_terminal ; 
reduce to statement on while_terminal ; 
reduce to statement on for_terminal ; 
reduce to statement on solar_terminal ; 
reduce to statement on illuminance_terminal ; 
reduce to statement on illuminate_terminal ; 
reduce to statement on left_curly_brace_terminal ; 
reduce to statement on else_terminal ; 
reduce to statement on right_curly_brace_terminal ; 
reduce to statement on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_110_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_varying_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_uniform_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_extern_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_void_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_return_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_break_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_continue_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_if_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_while_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_for_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_solar_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_illuminance_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_illuminate_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_left_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_else_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_right_curly_brace_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_52 },
};


const sweet::parser::ParserState shader_parser_state_110 =
{
    shader_parser_state_110_transitions,
    shader_parser_state_110_transitions + 24
};

/*
111:
solar_terminal . ; left_paren_terminal
reduce to solar on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_111_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_53 },
};


const sweet::parser::ParserState shader_parser_state_111 =
{
    shader_parser_state_111_transitions,
    shader_parser_state_111_transitions + 1
};

/*
112:
illuminate_terminal . ; left_paren_terminal
reduce to illuminate on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_112_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_54 },
};


const sweet::parser::ParserState shader_parser_state_112 =
{
    shader_parser_state_112_transitions,
    shader_parser_state_112_transitions + 1
};

/*
113:
illuminance_terminal . ; left_paren_terminal
reduce to illuminance on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_113_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_55 },
};


const sweet::parser::ParserState shader_parser_state_113 =
{
    shader_parser_state_113_transitions,
    shader_parser_state_113_transitions + 1
};

/*
114:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal . expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal . expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 165 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_114_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_165, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_114 =
{
    shader_parser_state_114_transitions,
    shader_parser_state_114_transitions + 23
};

/*
115:
. left_paren_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 172 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_115_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_172, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_115 =
{
    shader_parser_state_115_transitions,
    shader_parser_state_115_transitions + 23
};

/*
116:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression dot_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 178 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_116_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_178, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_116 =
{
    shader_parser_state_116_transitions,
    shader_parser_state_116_transitions + 23
};

/*
117:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression hat_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 179 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_117_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_179, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_117 =
{
    shader_parser_state_117_transitions,
    shader_parser_state_117_transitions + 23
};

/*
118:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression star_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 180 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_118_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_180, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_118 =
{
    shader_parser_state_118_transitions,
    shader_parser_state_118_transitions + 23
};

/*
119:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression slash_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 181 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_119_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_181, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_119 =
{
    shader_parser_state_119_transitions,
    shader_parser_state_119_transitions + 23
};

/*
120:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression plus_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 182 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_120_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_182, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_120 =
{
    shader_parser_state_120_transitions,
    shader_parser_state_120_transitions + 23
};

/*
121:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression minus_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 183 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_121_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_183, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_121 =
{
    shader_parser_state_121_transitions,
    shader_parser_state_121_transitions + 23
};

/*
122:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression gt_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 184 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_122_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_184, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_122 =
{
    shader_parser_state_122_transitions,
    shader_parser_state_122_transitions + 23
};

/*
123:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression gt__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 185 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_123_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_185, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_123 =
{
    shader_parser_state_123_transitions,
    shader_parser_state_123_transitions + 23
};

/*
124:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression lt_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 186 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_124_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_186, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_124 =
{
    shader_parser_state_124_transitions,
    shader_parser_state_124_transitions + 23
};

/*
125:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression lt__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 187 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_125_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_187, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_125 =
{
    shader_parser_state_125_transitions,
    shader_parser_state_125_transitions + 23
};

/*
126:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression eq__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 188 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_126_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_188, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_126 =
{
    shader_parser_state_126_transitions,
    shader_parser_state_126_transitions + 23
};

/*
127:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression bang__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 189 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_127_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_189, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_127 =
{
    shader_parser_state_127_transitions,
    shader_parser_state_127_transitions + 23
};

/*
128:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression amp__amp_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 190 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_128_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_190, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_128 =
{
    shader_parser_state_128_transitions,
    shader_parser_state_128_transitions + 23
};

/*
129:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression pipe__pipe_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 191 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_129_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_191, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_129 =
{
    shader_parser_state_129_transitions,
    shader_parser_state_129_transitions + 23
};

/*
130:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
minus_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 192 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_130_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_192, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_130 =
{
    shader_parser_state_130_transitions,
    shader_parser_state_130_transitions + 23
};

/*
131:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier star__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 193 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_131_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_193, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_131 =
{
    shader_parser_state_131_transitions,
    shader_parser_state_131_transitions + 23
};

/*
132:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier slash__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 194 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_132_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_194, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_132 =
{
    shader_parser_state_132_transitions,
    shader_parser_state_132_transitions + 23
};

/*
133:
. left_paren_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal . expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 195 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_133_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_195, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_133 =
{
    shader_parser_state_133_transitions,
    shader_parser_state_133_transitions + 23
};

/*
134:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 196 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_134_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_196, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_134 =
{
    shader_parser_state_134_transitions,
    shader_parser_state_134_transitions + 23
};

/*
135:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 197 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_135_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_197, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_135 =
{
    shader_parser_state_135_transitions,
    shader_parser_state_135_transitions + 23
};

/*
136:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 198 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_136_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_198, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_136 =
{
    shader_parser_state_136_transitions,
    shader_parser_state_136_transitions + 23
};

/*
137:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 199 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_137_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_199, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_137 =
{
    shader_parser_state_137_transitions,
    shader_parser_state_137_transitions + 23
};

/*
138:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 200 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_138_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_200, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_138 =
{
    shader_parser_state_138_transitions,
    shader_parser_state_138_transitions + 23
};

/*
139:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_paren_terminal . parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 226 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_139_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_226, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_139 =
{
    shader_parser_state_139_transitions,
    shader_parser_state_139_transitions + 26
};

/*
140:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
texture_terminal left_paren_terminal . parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 227 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_140_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_227, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_140 =
{
    shader_parser_state_140_transitions,
    shader_parser_state_140_transitions + 26
};

/*
141:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
environment_terminal left_paren_terminal . parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 228 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_141_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_228, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_141 =
{
    shader_parser_state_141_transitions,
    shader_parser_state_141_transitions + 26
};

/*
142:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. parameters comma_terminal expression ; right_paren_terminal, comma_terminal
. expression ; right_paren_terminal, comma_terminal
. ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shadow_terminal left_paren_terminal . parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
reduce to parameters on right_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 202 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 229 on parameters ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_142_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_112 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_202, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_parameters, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_229, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_142 =
{
    shader_parser_state_142_transitions,
    shader_parser_state_142_transitions + 26
};

/*
143:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
parameters comma_terminal . expression ; right_paren_terminal, comma_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 201 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_143_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_201, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_143 =
{
    shader_parser_state_143_transitions,
    shader_parser_state_143_transitions + 23
};

/*
144:
. left_paren_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. integer ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. real ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. string_literal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. texture ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. call ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. assign_expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. triple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. sixteentuple ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression question_terminal . expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier plus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
. identifier minus__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 203 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_144_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_203, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_144 =
{
    shader_parser_state_144_transitions,
    shader_parser_state_144_transitions + 23
};

/*
145:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression question_terminal expression colon_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 204 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_145_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_204, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_145 =
{
    shader_parser_state_145_transitions,
    shader_parser_state_145_transitions + 23
};

/*
146:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
typecast . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 205 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_146_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_205, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_146 =
{
    shader_parser_state_146_transitions,
    shader_parser_state_146_transitions + 23
};

/*
147:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal . expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 206 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_147_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_206, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_147 =
{
    shader_parser_state_147_transitions,
    shader_parser_state_147_transitions + 23
};

/*
148:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal . expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 207 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_148_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_207, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_148 =
{
    shader_parser_state_148_transitions,
    shader_parser_state_148_transitions + 23
};

/*
149:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 208 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_149_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_208, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_149 =
{
    shader_parser_state_149_transitions,
    shader_parser_state_149_transitions + 23
};

/*
150:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 209 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_150_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_209, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_150 =
{
    shader_parser_state_150_transitions,
    shader_parser_state_150_transitions + 23
};

/*
151:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 210 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_151_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_210, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_151 =
{
    shader_parser_state_151_transitions,
    shader_parser_state_151_transitions + 23
};

/*
152:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 211 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_152_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_211, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_152 =
{
    shader_parser_state_152_transitions,
    shader_parser_state_152_transitions + 23
};

/*
153:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 212 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_153_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_212, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_153 =
{
    shader_parser_state_153_transitions,
    shader_parser_state_153_transitions + 23
};

/*
154:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 213 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_154_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_213, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_154 =
{
    shader_parser_state_154_transitions,
    shader_parser_state_154_transitions + 23
};

/*
155:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 214 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_155_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_214, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_155 =
{
    shader_parser_state_155_transitions,
    shader_parser_state_155_transitions + 23
};

/*
156:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 215 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_156_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_215, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_156 =
{
    shader_parser_state_156_transitions,
    shader_parser_state_156_transitions + 23
};

/*
157:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 216 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_157_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_216, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_157 =
{
    shader_parser_state_157_transitions,
    shader_parser_state_157_transitions + 23
};

/*
158:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 217 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_158_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_217, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_158 =
{
    shader_parser_state_158_transitions,
    shader_parser_state_158_transitions + 23
};

/*
159:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 218 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_159_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_218, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_159 =
{
    shader_parser_state_159_transitions,
    shader_parser_state_159_transitions + 23
};

/*
160:
. left_paren_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 219 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_160_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_219, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_160 =
{
    shader_parser_state_160_transitions,
    shader_parser_state_160_transitions + 23
};

/*
161:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. integer ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. real ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. string_literal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. call ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. assign_expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. triple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. sixteentuple ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. typecast expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal . expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 220 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_161_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_220, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_161 =
{
    shader_parser_state_161_transitions,
    shader_parser_state_161_transitions + 23
};

/*
162:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 221 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_162_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_221, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_162 =
{
    shader_parser_state_162_transitions,
    shader_parser_state_162_transitions + 23
};

/*
163:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier plus__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 222 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_163_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_222, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_163 =
{
    shader_parser_state_163_transitions,
    shader_parser_state_163_transitions + 23
};

/*
164:
. left_paren_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. integer ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. real ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. string_literal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. call ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. assign_expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. triple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. sixteentuple ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. texture_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. environment_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. shadow_terminal left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. expression question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. typecast expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. float_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. string_terminal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. color_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. point_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. vector_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. normal_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. matrix_terminal optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. identifier eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
. identifier minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier minus__eq_terminal . expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 238 on color_terminal ; 
shift to 239 on point_terminal ; 
shift to 114 on left_paren_terminal ; 
shift to 246 on float_terminal ; 
shift to 247 on string_terminal ; 
shift to 240 on vector_terminal ; 
shift to 241 on normal_terminal ; 
shift to 242 on matrix_terminal ; 
shift to 130 on minus_terminal ; 
shift to 223 on expression ; 
shift to 175 on assign_expression ; 
shift to 174 on call ; 
shift to 170 on texture ; 
shift to 176 on triple ; 
shift to 177 on sixteentuple ; 
shift to 146 on typecast ; 
shift to 167 on integer ; 
shift to 168 on real ; 
shift to 169 on string_literal ; 
shift to 231 on texture_terminal ; 
shift to 233 on environment_terminal ; 
shift to 235 on shadow_terminal ; 
shift to 171 on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_164_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_238, NULL },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_239, NULL },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_114, NULL },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_246, NULL },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_247, NULL },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_240, NULL },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_241, NULL },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_242, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_130, NULL },
    { shader_SYMBOL_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_223, NULL },
    { shader_SYMBOL_assign_expression, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_175, NULL },
    { shader_SYMBOL_call, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_174, NULL },
    { shader_SYMBOL_texture, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_170, NULL },
    { shader_SYMBOL_triple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_176, NULL },
    { shader_SYMBOL_sixteentuple, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_177, NULL },
    { shader_SYMBOL_typecast, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_146, NULL },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_167, NULL },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_168, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_169, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_231, NULL },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_233, NULL },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_235, NULL },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_171, NULL },
};


const sweet::parser::ParserState shader_parser_state_164 =
{
    shader_parser_state_164_transitions,
    shader_parser_state_164_transitions + 23
};

/*
165:
left_paren_terminal expression . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression . comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
left_paren_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 166 on right_paren_terminal ; 
shift to 147 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_165_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_166, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_147, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_165 =
{
    shader_parser_state_165_transitions,
    shader_parser_state_165_transitions + 17
};

/*
166:
left_paren_terminal expression right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_166_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_56 },
};


const sweet::parser::ParserState shader_parser_state_166 =
{
    shader_parser_state_166_transitions,
    shader_parser_state_166_transitions + 20
};

/*
167:
integer . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_167_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_57 },
};


const sweet::parser::ParserState shader_parser_state_167 =
{
    shader_parser_state_167_transitions,
    shader_parser_state_167_transitions + 20
};

/*
168:
real . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_168_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_58 },
};


const sweet::parser::ParserState shader_parser_state_168 =
{
    shader_parser_state_168_transitions,
    shader_parser_state_168_transitions + 20
};

/*
169:
string_literal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_169_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_59 },
};


const sweet::parser::ParserState shader_parser_state_169 =
{
    shader_parser_state_169_transitions,
    shader_parser_state_169_transitions + 20
};

/*
170:
texture . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_170_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_60 },
};


const sweet::parser::ParserState shader_parser_state_170 =
{
    shader_parser_state_170_transitions,
    shader_parser_state_170_transitions + 20
};

/*
171:
identifier . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier . minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 139 on left_paren_terminal ; 
reduce to expression on right_paren_terminal ; 
shift to 115 on left_square_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
shift to 162 on eq_terminal ; 
shift to 163 on plus__eq_terminal ; 
shift to 164 on minus__eq_terminal ; 
shift to 131 on star__eq_terminal ; 
shift to 132 on slash__eq_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_171_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_139, NULL },
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_left_square_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_115, NULL },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_162, NULL },
    { shader_SYMBOL_plus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_163, NULL },
    { shader_SYMBOL_minus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_164, NULL },
    { shader_SYMBOL_star__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_131, NULL },
    { shader_SYMBOL_slash__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_132, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_61 },
};


const sweet::parser::ParserState shader_parser_state_171 =
{
    shader_parser_state_171_transitions,
    shader_parser_state_171_transitions + 27
};

/*
172:
identifier left_square_paren_terminal expression . right_square_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . dot_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 173 on right_square_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_172_transitions[] = 
{
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_173, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_172 =
{
    shader_parser_state_172_transitions,
    shader_parser_state_172_transitions + 16
};

/*
173:
identifier left_square_paren_terminal expression right_square_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . plus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . minus__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . star__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . slash__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
shift to 134 on eq_terminal ; 
shift to 135 on plus__eq_terminal ; 
shift to 136 on minus__eq_terminal ; 
shift to 137 on star__eq_terminal ; 
shift to 138 on slash__eq_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_173_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_134, NULL },
    { shader_SYMBOL_plus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_135, NULL },
    { shader_SYMBOL_minus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_136, NULL },
    { shader_SYMBOL_star__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_137, NULL },
    { shader_SYMBOL_slash__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_138, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_62 },
};


const sweet::parser::ParserState shader_parser_state_173 =
{
    shader_parser_state_173_transitions,
    shader_parser_state_173_transitions + 25
};

/*
174:
call . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_174_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_63 },
};


const sweet::parser::ParserState shader_parser_state_174 =
{
    shader_parser_state_174_transitions,
    shader_parser_state_174_transitions + 20
};

/*
175:
assign_expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_175_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_64 },
};


const sweet::parser::ParserState shader_parser_state_175 =
{
    shader_parser_state_175_transitions,
    shader_parser_state_175_transitions + 20
};

/*
176:
triple . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_176_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_65 },
};


const sweet::parser::ParserState shader_parser_state_176 =
{
    shader_parser_state_176_transitions,
    shader_parser_state_176_transitions + 20
};

/*
177:
sixteentuple . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_177_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_66 },
};


const sweet::parser::ParserState shader_parser_state_177 =
{
    shader_parser_state_177_transitions,
    shader_parser_state_177_transitions + 20
};

/*
178:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression dot_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_178_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_67 },
};


const sweet::parser::ParserState shader_parser_state_178 =
{
    shader_parser_state_178_transitions,
    shader_parser_state_178_transitions + 20
};

/*
179:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression hat_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_179_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_68 },
};


const sweet::parser::ParserState shader_parser_state_179 =
{
    shader_parser_state_179_transitions,
    shader_parser_state_179_transitions + 20
};

/*
180:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression star_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_180_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_69 },
};


const sweet::parser::ParserState shader_parser_state_180 =
{
    shader_parser_state_180_transitions,
    shader_parser_state_180_transitions + 20
};

/*
181:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression slash_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_181_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_70 },
};


const sweet::parser::ParserState shader_parser_state_181 =
{
    shader_parser_state_181_transitions,
    shader_parser_state_181_transitions + 20
};

/*
182:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression plus_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_182_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_71 },
};


const sweet::parser::ParserState shader_parser_state_182 =
{
    shader_parser_state_182_transitions,
    shader_parser_state_182_transitions + 20
};

/*
183:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression minus_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_183_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_72 },
};


const sweet::parser::ParserState shader_parser_state_183 =
{
    shader_parser_state_183_transitions,
    shader_parser_state_183_transitions + 20
};

/*
184:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression gt_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_184_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_73 },
};


const sweet::parser::ParserState shader_parser_state_184 =
{
    shader_parser_state_184_transitions,
    shader_parser_state_184_transitions + 20
};

/*
185:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression gt__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_185_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_74 },
};


const sweet::parser::ParserState shader_parser_state_185 =
{
    shader_parser_state_185_transitions,
    shader_parser_state_185_transitions + 20
};

/*
186:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression lt_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_186_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_75 },
};


const sweet::parser::ParserState shader_parser_state_186 =
{
    shader_parser_state_186_transitions,
    shader_parser_state_186_transitions + 20
};

/*
187:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression lt__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_187_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_76 },
};


const sweet::parser::ParserState shader_parser_state_187 =
{
    shader_parser_state_187_transitions,
    shader_parser_state_187_transitions + 20
};

/*
188:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression eq__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_188_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_77 },
};


const sweet::parser::ParserState shader_parser_state_188 =
{
    shader_parser_state_188_transitions,
    shader_parser_state_188_transitions + 20
};

/*
189:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression bang__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_189_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_78 },
};


const sweet::parser::ParserState shader_parser_state_189 =
{
    shader_parser_state_189_transitions,
    shader_parser_state_189_transitions + 20
};

/*
190:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression amp__amp_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_190_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_79 },
};


const sweet::parser::ParserState shader_parser_state_190 =
{
    shader_parser_state_190_transitions,
    shader_parser_state_190_transitions + 20
};

/*
191:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression pipe__pipe_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_191_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_80 },
};


const sweet::parser::ParserState shader_parser_state_191 =
{
    shader_parser_state_191_transitions,
    shader_parser_state_191_transitions + 20
};

/*
192:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
minus_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_192_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_81 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_81 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_81 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_81 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_81 },
};


const sweet::parser::ParserState shader_parser_state_192 =
{
    shader_parser_state_192_transitions,
    shader_parser_state_192_transitions + 20
};

/*
193:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier star__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_193_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_103 },
};


const sweet::parser::ParserState shader_parser_state_193 =
{
    shader_parser_state_193_transitions,
    shader_parser_state_193_transitions + 20
};

/*
194:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier slash__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_194_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_104 },
};


const sweet::parser::ParserState shader_parser_state_194 =
{
    shader_parser_state_194_transitions,
    shader_parser_state_194_transitions + 20
};

/*
195:
expression . dot_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression . right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
expression . question_terminal expression colon_terminal expression ; right_square_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
shift to 225 on right_square_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_195_transitions[] = 
{
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_225, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_195 =
{
    shader_parser_state_195_transitions,
    shader_parser_state_195_transitions + 16
};

/*
196:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_196_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_105 },
};


const sweet::parser::ParserState shader_parser_state_196 =
{
    shader_parser_state_196_transitions,
    shader_parser_state_196_transitions + 20
};

/*
197:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_197_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_106 },
};


const sweet::parser::ParserState shader_parser_state_197 =
{
    shader_parser_state_197_transitions,
    shader_parser_state_197_transitions + 20
};

/*
198:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_198_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_107 },
};


const sweet::parser::ParserState shader_parser_state_198 =
{
    shader_parser_state_198_transitions,
    shader_parser_state_198_transitions + 20
};

/*
199:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_199_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_108 },
};


const sweet::parser::ParserState shader_parser_state_199 =
{
    shader_parser_state_199_transitions,
    shader_parser_state_199_transitions + 20
};

/*
200:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_200_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_109 },
};


const sweet::parser::ParserState shader_parser_state_200 =
{
    shader_parser_state_200_transitions,
    shader_parser_state_200_transitions + 20
};

/*
201:
expression . dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
parameters comma_terminal expression . ; right_paren_terminal, comma_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
reduce to parameters on right_paren_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_201_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_110 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_110 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_201 =
{
    shader_parser_state_201_transitions,
    shader_parser_state_201_transitions + 17
};

/*
202:
expression . dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . ; right_paren_terminal, comma_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
reduce to parameters on right_paren_terminal ; 
reduce to parameters on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_202_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_111 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_111 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_202 =
{
    shader_parser_state_202_transitions,
    shader_parser_state_202_transitions + 17
};

/*
203:
expression . dot_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . hat_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . star_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . slash_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . plus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . minus_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . gt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . gt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . lt_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . lt__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . eq__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . bang__eq_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . amp__amp_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, colon_terminal
expression question_terminal expression . colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
shift to 145 on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_203_transitions[] = 
{
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_145, NULL },
};


const sweet::parser::ParserState shader_parser_state_203 =
{
    shader_parser_state_203_transitions,
    shader_parser_state_203_transitions + 16
};

/*
204:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression question_terminal expression colon_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_204_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_82 },
};


const sweet::parser::ParserState shader_parser_state_204 =
{
    shader_parser_state_204_transitions,
    shader_parser_state_204_transitions + 20
};

/*
205:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
typecast expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to expression on right_paren_terminal ; 
reduce to expression on right_square_paren_terminal ; 
reduce to expression on comma_terminal ; 
reduce to expression on question_terminal ; 
reduce to expression on pipe__pipe_terminal ; 
reduce to expression on amp__amp_terminal ; 
reduce to expression on gt_terminal ; 
reduce to expression on gt__eq_terminal ; 
reduce to expression on lt_terminal ; 
reduce to expression on lt__eq_terminal ; 
reduce to expression on eq__eq_terminal ; 
reduce to expression on bang__eq_terminal ; 
reduce to expression on plus_terminal ; 
reduce to expression on minus_terminal ; 
reduce to expression on dot_terminal ; 
reduce to expression on hat_terminal ; 
reduce to expression on slash_terminal ; 
reduce to expression on star_terminal ; 
reduce to expression on semi_colon_terminal ; 
reduce to expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_205_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_83 },
};


const sweet::parser::ParserState shader_parser_state_205 =
{
    shader_parser_state_205_transitions,
    shader_parser_state_205_transitions + 20
};

/*
206:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression . comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
left_paren_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 148 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_206_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_148, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_206 =
{
    shader_parser_state_206_transitions,
    shader_parser_state_206_transitions + 16
};

/*
207:
expression . dot_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 244 on right_paren_terminal ; 
shift to 149 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_207_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_244, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_149, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_207 =
{
    shader_parser_state_207_transitions,
    shader_parser_state_207_transitions + 17
};

/*
208:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 150 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_208_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_150, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_208 =
{
    shader_parser_state_208_transitions,
    shader_parser_state_208_transitions + 16
};

/*
209:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 151 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_209_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_151, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_209 =
{
    shader_parser_state_209_transitions,
    shader_parser_state_209_transitions + 16
};

/*
210:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 152 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_210_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_152, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_210 =
{
    shader_parser_state_210_transitions,
    shader_parser_state_210_transitions + 16
};

/*
211:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 153 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_211_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_153, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_211 =
{
    shader_parser_state_211_transitions,
    shader_parser_state_211_transitions + 16
};

/*
212:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 154 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_212_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_154, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_212 =
{
    shader_parser_state_212_transitions,
    shader_parser_state_212_transitions + 16
};

/*
213:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 155 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_213_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_155, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_213 =
{
    shader_parser_state_213_transitions,
    shader_parser_state_213_transitions + 16
};

/*
214:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 156 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_214_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_156, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_214 =
{
    shader_parser_state_214_transitions,
    shader_parser_state_214_transitions + 16
};

/*
215:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 157 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_215_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_157, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_215 =
{
    shader_parser_state_215_transitions,
    shader_parser_state_215_transitions + 16
};

/*
216:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 158 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_216_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_158, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_216 =
{
    shader_parser_state_216_transitions,
    shader_parser_state_216_transitions + 16
};

/*
217:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 159 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_217_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_159, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_217 =
{
    shader_parser_state_217_transitions,
    shader_parser_state_217_transitions + 16
};

/*
218:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 160 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_218_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_160, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_218 =
{
    shader_parser_state_218_transitions,
    shader_parser_state_218_transitions + 16
};

/*
219:
expression . dot_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . comma_terminal expression right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 161 on comma_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_219_transitions[] = 
{
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_161, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_219 =
{
    shader_parser_state_219_transitions,
    shader_parser_state_219_transitions + 16
};

/*
220:
expression . dot_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . hat_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . star_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . slash_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . plus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . minus_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 245 on right_paren_terminal ; 
shift to 144 on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_220_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_245, NULL },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_144, NULL },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
};


const sweet::parser::ParserState shader_parser_state_220 =
{
    shader_parser_state_220_transitions,
    shader_parser_state_220_transitions + 16
};

/*
221:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_221_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_100 },
};


const sweet::parser::ParserState shader_parser_state_221 =
{
    shader_parser_state_221_transitions,
    shader_parser_state_221_transitions + 20
};

/*
222:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier plus__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_222_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_101 },
};


const sweet::parser::ParserState shader_parser_state_222 =
{
    shader_parser_state_222_transitions,
    shader_parser_state_222_transitions + 20
};

/*
223:
expression . dot_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . hat_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . star_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . slash_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . plus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . minus_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . gt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . lt__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . eq__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . bang__eq_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . amp__amp_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . pipe__pipe_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
expression . question_terminal expression colon_terminal expression ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
identifier minus__eq_terminal expression . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to assign_expression on right_paren_terminal ; 
reduce to assign_expression on right_square_paren_terminal ; 
reduce to assign_expression on comma_terminal ; 
reduce to assign_expression on question_terminal ; 
shift to 129 on pipe__pipe_terminal ; 
shift to 128 on amp__amp_terminal ; 
shift to 122 on gt_terminal ; 
shift to 123 on gt__eq_terminal ; 
shift to 124 on lt_terminal ; 
shift to 125 on lt__eq_terminal ; 
shift to 126 on eq__eq_terminal ; 
shift to 127 on bang__eq_terminal ; 
shift to 120 on plus_terminal ; 
shift to 121 on minus_terminal ; 
shift to 116 on dot_terminal ; 
shift to 117 on hat_terminal ; 
shift to 119 on slash_terminal ; 
shift to 118 on star_terminal ; 
reduce to assign_expression on semi_colon_terminal ; 
reduce to assign_expression on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_223_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_129, NULL },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_128, NULL },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_122, NULL },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_123, NULL },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_124, NULL },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_125, NULL },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_126, NULL },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_127, NULL },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_120, NULL },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_121, NULL },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_116, NULL },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_117, NULL },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_119, NULL },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_118, NULL },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_102 },
};


const sweet::parser::ParserState shader_parser_state_223 =
{
    shader_parser_state_223_transitions,
    shader_parser_state_223_transitions + 20
};

/*
224:
identifier . star__eq_terminal expression ; semi_colon_terminal
identifier . slash__eq_terminal expression ; semi_colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal eq_terminal expression ; semi_colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal plus__eq_terminal expression ; semi_colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal minus__eq_terminal expression ; semi_colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal star__eq_terminal expression ; semi_colon_terminal
identifier . left_square_paren_terminal expression right_square_paren_terminal slash__eq_terminal expression ; semi_colon_terminal
identifier . left_paren_terminal parameters right_paren_terminal ; semi_colon_terminal
identifier . eq_terminal expression ; semi_colon_terminal
identifier . plus__eq_terminal expression ; semi_colon_terminal
identifier . minus__eq_terminal expression ; semi_colon_terminal
shift to 139 on left_paren_terminal ; 
shift to 133 on left_square_paren_terminal ; 
shift to 162 on eq_terminal ; 
shift to 163 on plus__eq_terminal ; 
shift to 164 on minus__eq_terminal ; 
shift to 131 on star__eq_terminal ; 
shift to 132 on slash__eq_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_224_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_139, NULL },
    { shader_SYMBOL_left_square_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_133, NULL },
    { shader_SYMBOL_eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_162, NULL },
    { shader_SYMBOL_plus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_163, NULL },
    { shader_SYMBOL_minus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_164, NULL },
    { shader_SYMBOL_star__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_131, NULL },
    { shader_SYMBOL_slash__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_132, NULL },
};


const sweet::parser::ParserState shader_parser_state_224 =
{
    shader_parser_state_224_transitions,
    shader_parser_state_224_transitions + 7
};

/*
225:
identifier left_square_paren_terminal expression right_square_paren_terminal . eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . plus__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . minus__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . star__eq_terminal expression ; semi_colon_terminal
identifier left_square_paren_terminal expression right_square_paren_terminal . slash__eq_terminal expression ; semi_colon_terminal
shift to 134 on eq_terminal ; 
shift to 135 on plus__eq_terminal ; 
shift to 136 on minus__eq_terminal ; 
shift to 137 on star__eq_terminal ; 
shift to 138 on slash__eq_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_225_transitions[] = 
{
    { shader_SYMBOL_eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_134, NULL },
    { shader_SYMBOL_plus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_135, NULL },
    { shader_SYMBOL_minus__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_136, NULL },
    { shader_SYMBOL_star__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_137, NULL },
    { shader_SYMBOL_slash__eq_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_138, NULL },
};


const sweet::parser::ParserState shader_parser_state_225 =
{
    shader_parser_state_225_transitions,
    shader_parser_state_225_transitions + 5
};

/*
226:
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
identifier left_paren_terminal parameters . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 230 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_226_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_230, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_226 =
{
    shader_parser_state_226_transitions,
    shader_parser_state_226_transitions + 2
};

/*
227:
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
texture_terminal left_paren_terminal parameters . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 232 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_227_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_232, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_227 =
{
    shader_parser_state_227_transitions,
    shader_parser_state_227_transitions + 2
};

/*
228:
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
environment_terminal left_paren_terminal parameters . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 234 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_228_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_234, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_228 =
{
    shader_parser_state_228_transitions,
    shader_parser_state_228_transitions + 2
};

/*
229:
parameters . comma_terminal expression ; right_paren_terminal, comma_terminal
shadow_terminal left_paren_terminal parameters . right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 236 on right_paren_terminal ; 
shift to 143 on comma_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_229_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_236, NULL },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_143, NULL },
};


const sweet::parser::ParserState shader_parser_state_229 =
{
    shader_parser_state_229_transitions,
    shader_parser_state_229_transitions + 2
};

/*
230:
identifier left_paren_terminal parameters right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to call on right_paren_terminal ; 
reduce to call on right_square_paren_terminal ; 
reduce to call on comma_terminal ; 
reduce to call on question_terminal ; 
reduce to call on pipe__pipe_terminal ; 
reduce to call on amp__amp_terminal ; 
reduce to call on gt_terminal ; 
reduce to call on gt__eq_terminal ; 
reduce to call on lt_terminal ; 
reduce to call on lt__eq_terminal ; 
reduce to call on eq__eq_terminal ; 
reduce to call on bang__eq_terminal ; 
reduce to call on plus_terminal ; 
reduce to call on minus_terminal ; 
reduce to call on dot_terminal ; 
reduce to call on hat_terminal ; 
reduce to call on slash_terminal ; 
reduce to call on star_terminal ; 
reduce to call on semi_colon_terminal ; 
reduce to call on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_230_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_113 },
};


const sweet::parser::ParserState shader_parser_state_230 =
{
    shader_parser_state_230_transitions,
    shader_parser_state_230_transitions + 20
};

/*
231:
texture_terminal . left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 140 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_231_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_140, NULL },
};


const sweet::parser::ParserState shader_parser_state_231 =
{
    shader_parser_state_231_transitions,
    shader_parser_state_231_transitions + 1
};

/*
232:
texture_terminal left_paren_terminal parameters right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to texture on right_paren_terminal ; 
reduce to texture on right_square_paren_terminal ; 
reduce to texture on comma_terminal ; 
reduce to texture on question_terminal ; 
reduce to texture on pipe__pipe_terminal ; 
reduce to texture on amp__amp_terminal ; 
reduce to texture on gt_terminal ; 
reduce to texture on gt__eq_terminal ; 
reduce to texture on lt_terminal ; 
reduce to texture on lt__eq_terminal ; 
reduce to texture on eq__eq_terminal ; 
reduce to texture on bang__eq_terminal ; 
reduce to texture on plus_terminal ; 
reduce to texture on minus_terminal ; 
reduce to texture on dot_terminal ; 
reduce to texture on hat_terminal ; 
reduce to texture on slash_terminal ; 
reduce to texture on star_terminal ; 
reduce to texture on semi_colon_terminal ; 
reduce to texture on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_232_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_114 },
};


const sweet::parser::ParserState shader_parser_state_232 =
{
    shader_parser_state_232_transitions,
    shader_parser_state_232_transitions + 20
};

/*
233:
environment_terminal . left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 141 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_233_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_141, NULL },
};


const sweet::parser::ParserState shader_parser_state_233 =
{
    shader_parser_state_233_transitions,
    shader_parser_state_233_transitions + 1
};

/*
234:
environment_terminal left_paren_terminal parameters right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to texture on right_paren_terminal ; 
reduce to texture on right_square_paren_terminal ; 
reduce to texture on comma_terminal ; 
reduce to texture on question_terminal ; 
reduce to texture on pipe__pipe_terminal ; 
reduce to texture on amp__amp_terminal ; 
reduce to texture on gt_terminal ; 
reduce to texture on gt__eq_terminal ; 
reduce to texture on lt_terminal ; 
reduce to texture on lt__eq_terminal ; 
reduce to texture on eq__eq_terminal ; 
reduce to texture on bang__eq_terminal ; 
reduce to texture on plus_terminal ; 
reduce to texture on minus_terminal ; 
reduce to texture on dot_terminal ; 
reduce to texture on hat_terminal ; 
reduce to texture on slash_terminal ; 
reduce to texture on star_terminal ; 
reduce to texture on semi_colon_terminal ; 
reduce to texture on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_234_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_115 },
};


const sweet::parser::ParserState shader_parser_state_234 =
{
    shader_parser_state_234_transitions,
    shader_parser_state_234_transitions + 20
};

/*
235:
shadow_terminal . left_paren_terminal parameters right_paren_terminal ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
shift to 142 on left_paren_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_235_transitions[] = 
{
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_142, NULL },
};


const sweet::parser::ParserState shader_parser_state_235 =
{
    shader_parser_state_235_transitions,
    shader_parser_state_235_transitions + 1
};

/*
236:
shadow_terminal left_paren_terminal parameters right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to texture on right_paren_terminal ; 
reduce to texture on right_square_paren_terminal ; 
reduce to texture on comma_terminal ; 
reduce to texture on question_terminal ; 
reduce to texture on pipe__pipe_terminal ; 
reduce to texture on amp__amp_terminal ; 
reduce to texture on gt_terminal ; 
reduce to texture on gt__eq_terminal ; 
reduce to texture on lt_terminal ; 
reduce to texture on lt__eq_terminal ; 
reduce to texture on eq__eq_terminal ; 
reduce to texture on bang__eq_terminal ; 
reduce to texture on plus_terminal ; 
reduce to texture on minus_terminal ; 
reduce to texture on dot_terminal ; 
reduce to texture on hat_terminal ; 
reduce to texture on slash_terminal ; 
reduce to texture on star_terminal ; 
reduce to texture on semi_colon_terminal ; 
reduce to texture on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_236_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_116 },
};


const sweet::parser::ParserState shader_parser_state_236 =
{
    shader_parser_state_236_transitions,
    shader_parser_state_236_transitions + 20
};

/*
237:
integer . ; semi_colon_terminal
reduce to optional_integer on semi_colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_237_transitions[] = 
{
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_84 },
};


const sweet::parser::ParserState shader_parser_state_237 =
{
    shader_parser_state_237_transitions,
    shader_parser_state_237_transitions + 1
};

/*
238:
. string_literal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
color_terminal . optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
shift to 248 on optional_string ; 
shift to 243 on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_238_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_optional_string, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_248, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_243, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
};


const sweet::parser::ParserState shader_parser_state_238 =
{
    shader_parser_state_238_transitions,
    shader_parser_state_238_transitions + 17
};

/*
239:
. string_literal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
point_terminal . optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
shift to 249 on optional_string ; 
shift to 243 on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_239_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_optional_string, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_249, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_243, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
};


const sweet::parser::ParserState shader_parser_state_239 =
{
    shader_parser_state_239_transitions,
    shader_parser_state_239_transitions + 17
};

/*
240:
. string_literal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
vector_terminal . optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
shift to 250 on optional_string ; 
shift to 243 on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_240_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_optional_string, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_250, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_243, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
};


const sweet::parser::ParserState shader_parser_state_240 =
{
    shader_parser_state_240_transitions,
    shader_parser_state_240_transitions + 17
};

/*
241:
. string_literal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
normal_terminal . optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
shift to 251 on optional_string ; 
shift to 243 on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_241_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_optional_string, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_251, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_243, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
};


const sweet::parser::ParserState shader_parser_state_241 =
{
    shader_parser_state_241_transitions,
    shader_parser_state_241_transitions + 17
};

/*
242:
. string_literal ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
. ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
matrix_terminal . optional_string ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
shift to 252 on optional_string ; 
shift to 243 on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_242_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_optional_string, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_252, NULL },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_SHIFT, &shader_parser_state_243, NULL },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_89 },
};


const sweet::parser::ParserState shader_parser_state_242 =
{
    shader_parser_state_242_transitions,
    shader_parser_state_242_transitions + 17
};

/*
243:
string_literal . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to optional_string on color_terminal ; 
reduce to optional_string on point_terminal ; 
reduce to optional_string on left_paren_terminal ; 
reduce to optional_string on float_terminal ; 
reduce to optional_string on string_terminal ; 
reduce to optional_string on vector_terminal ; 
reduce to optional_string on normal_terminal ; 
reduce to optional_string on matrix_terminal ; 
reduce to optional_string on minus_terminal ; 
reduce to optional_string on integer ; 
reduce to optional_string on real ; 
reduce to optional_string on string_literal ; 
reduce to optional_string on texture_terminal ; 
reduce to optional_string on environment_terminal ; 
reduce to optional_string on shadow_terminal ; 
reduce to optional_string on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_243_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_88 },
};


const sweet::parser::ParserState shader_parser_state_243 =
{
    shader_parser_state_243_transitions,
    shader_parser_state_243_transitions + 16
};

/*
244:
left_paren_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to triple on right_paren_terminal ; 
reduce to triple on right_square_paren_terminal ; 
reduce to triple on comma_terminal ; 
reduce to triple on question_terminal ; 
reduce to triple on pipe__pipe_terminal ; 
reduce to triple on amp__amp_terminal ; 
reduce to triple on gt_terminal ; 
reduce to triple on gt__eq_terminal ; 
reduce to triple on lt_terminal ; 
reduce to triple on lt__eq_terminal ; 
reduce to triple on eq__eq_terminal ; 
reduce to triple on bang__eq_terminal ; 
reduce to triple on plus_terminal ; 
reduce to triple on minus_terminal ; 
reduce to triple on dot_terminal ; 
reduce to triple on hat_terminal ; 
reduce to triple on slash_terminal ; 
reduce to triple on star_terminal ; 
reduce to triple on semi_colon_terminal ; 
reduce to triple on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_244_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_91 },
};


const sweet::parser::ParserState shader_parser_state_244 =
{
    shader_parser_state_244_transitions,
    shader_parser_state_244_transitions + 20
};

/*
245:
left_paren_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression comma_terminal expression right_paren_terminal . ; right_paren_terminal, right_square_paren_terminal, comma_terminal, question_terminal, pipe__pipe_terminal, amp__amp_terminal, gt_terminal, gt__eq_terminal, lt_terminal, lt__eq_terminal, eq__eq_terminal, bang__eq_terminal, plus_terminal, minus_terminal, dot_terminal, hat_terminal, slash_terminal, star_terminal, semi_colon_terminal, colon_terminal
reduce to sixteentuple on right_paren_terminal ; 
reduce to sixteentuple on right_square_paren_terminal ; 
reduce to sixteentuple on comma_terminal ; 
reduce to sixteentuple on question_terminal ; 
reduce to sixteentuple on pipe__pipe_terminal ; 
reduce to sixteentuple on amp__amp_terminal ; 
reduce to sixteentuple on gt_terminal ; 
reduce to sixteentuple on gt__eq_terminal ; 
reduce to sixteentuple on lt_terminal ; 
reduce to sixteentuple on lt__eq_terminal ; 
reduce to sixteentuple on eq__eq_terminal ; 
reduce to sixteentuple on bang__eq_terminal ; 
reduce to sixteentuple on plus_terminal ; 
reduce to sixteentuple on minus_terminal ; 
reduce to sixteentuple on dot_terminal ; 
reduce to sixteentuple on hat_terminal ; 
reduce to sixteentuple on slash_terminal ; 
reduce to sixteentuple on star_terminal ; 
reduce to sixteentuple on semi_colon_terminal ; 
reduce to sixteentuple on colon_terminal ; 

*/

const sweet::parser::ParserTransition shader_parser_state_245_transitions[] = 
{
    { shader_SYMBOL_right_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_right_square_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_comma_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_question_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_pipe__pipe_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_amp__amp_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_gt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_gt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_lt_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_lt__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_eq__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_bang__eq_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_plus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_dot_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_hat_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_slash_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_star_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_semi_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
    { shader_SYMBOL_colon_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_92 },
};


const sweet::parser::ParserState shader_parser_state_245 =
{
    shader_parser_state_245_transitions,
    shader_parser_state_245_transitions + 20
};

/*
246:
float_terminal . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_246_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_93 },
};


const sweet::parser::ParserState shader_parser_state_246 =
{
    shader_parser_state_246_transitions,
    shader_parser_state_246_transitions + 16
};

/*
247:
string_terminal . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_247_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_94 },
};


const sweet::parser::ParserState shader_parser_state_247 =
{
    shader_parser_state_247_transitions,
    shader_parser_state_247_transitions + 16
};

/*
248:
color_terminal optional_string . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_248_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_95 },
};


const sweet::parser::ParserState shader_parser_state_248 =
{
    shader_parser_state_248_transitions,
    shader_parser_state_248_transitions + 16
};

/*
249:
point_terminal optional_string . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_249_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_96 },
};


const sweet::parser::ParserState shader_parser_state_249 =
{
    shader_parser_state_249_transitions,
    shader_parser_state_249_transitions + 16
};

/*
250:
vector_terminal optional_string . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_250_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_97 },
};


const sweet::parser::ParserState shader_parser_state_250 =
{
    shader_parser_state_250_transitions,
    shader_parser_state_250_transitions + 16
};

/*
251:
normal_terminal optional_string . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_251_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_98 },
};


const sweet::parser::ParserState shader_parser_state_251 =
{
    shader_parser_state_251_transitions,
    shader_parser_state_251_transitions + 16
};

/*
252:
matrix_terminal optional_string . ; color_terminal, point_terminal, left_paren_terminal, float_terminal, string_terminal, vector_terminal, normal_terminal, matrix_terminal, minus_terminal, integer, real, string_literal, texture_terminal, environment_terminal, shadow_terminal, identifier
reduce to typecast on color_terminal ; 
reduce to typecast on point_terminal ; 
reduce to typecast on left_paren_terminal ; 
reduce to typecast on float_terminal ; 
reduce to typecast on string_terminal ; 
reduce to typecast on vector_terminal ; 
reduce to typecast on normal_terminal ; 
reduce to typecast on matrix_terminal ; 
reduce to typecast on minus_terminal ; 
reduce to typecast on integer ; 
reduce to typecast on real ; 
reduce to typecast on string_literal ; 
reduce to typecast on texture_terminal ; 
reduce to typecast on environment_terminal ; 
reduce to typecast on shadow_terminal ; 
reduce to typecast on identifier ; 

*/

const sweet::parser::ParserTransition shader_parser_state_252_transitions[] = 
{
    { shader_SYMBOL_color_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_point_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_left_paren_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_float_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_string_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_vector_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_normal_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_matrix_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_minus_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_integer, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_real, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_string_literal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_texture_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_environment_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_shadow_terminal, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
    { shader_SYMBOL_identifier, sweet::parser::TRANSITION_REDUCE, NULL, &shader_parser_production_99 },
};


const sweet::parser::ParserState shader_parser_state_252 =
{
    shader_parser_state_252_transitions,
    shader_parser_state_252_transitions + 16
};


sweet::parser::ParserStateMachine shader_parser_state_machine = 
{
    &shader_parser_state_0,
    &shader_lexer_state_machine,
    shader_SYMBOL_dot_start,
    shader_SYMBOL_dot_end,
    shader_SYMBOL_dot_error_terminal,
    shader_parser_actions,
    shader_parser_actions + 86,
};

